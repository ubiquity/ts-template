(()=>{var e={403:function(e,r,t){"use strict";var s=this&&this.__awaiter||function(e,r,t,s){function adopt(e){return e instanceof t?e:new t((function(r){r(e)}))}return new(t||(t=Promise))((function(t,o){function fulfilled(e){try{step(s.next(e))}catch(e){o(e)}}function rejected(e){try{step(s["throw"](e))}catch(e){o(e)}}function step(e){e.done?t(e.value):adopt(e.value).then(fulfilled,rejected)}step((s=s.apply(e,r||[])).next())}))};var o=this&&this.__generator||function(e,r){var t={label:0,sent:function(){if(n[0]&1)throw n[1];return n[1]},trys:[],ops:[]},s,o,n,i=Object.create((typeof Iterator==="function"?Iterator:Object).prototype);return i.next=verb(0),i["throw"]=verb(1),i["return"]=verb(2),typeof Symbol==="function"&&(i[Symbol.iterator]=function(){return this}),i;function verb(e){return function(r){return step([e,r])}}function step(a){if(s)throw new TypeError("Generator is already executing.");while(i&&(i=0,a[0]&&(t=0)),t)try{if(s=1,o&&(n=a[0]&2?o["return"]:a[0]?o["throw"]||((n=o["return"])&&n.call(o),0):o.next)&&!(n=n.call(o,a[1])).done)return n;if(o=0,n)a=[a[0]&2,n.value];switch(a[0]){case 0:case 1:n=a;break;case 4:t.label++;return{value:a[1],done:false};case 5:t.label++;o=a[1];a=[0];continue;case 7:a=t.ops.pop();t.trys.pop();continue;default:if(!(n=t.trys,n=n.length>0&&n[n.length-1])&&(a[0]===6||a[0]===2)){t=0;continue}if(a[0]===3&&(!n||a[1]>n[0]&&a[1]<n[3])){t.label=a[1];break}if(a[0]===6&&t.label<n[1]){t.label=n[1];n=a;break}if(n&&t.label<n[2]){t.label=n[2];t.ops.push(a);break}if(n[2])t.ops.pop();t.trys.pop();continue}a=r.call(e,t)}catch(e){a=[6,e];o=0}finally{s=n=0}if(a[0]&5)throw a[1];return{value:a[0]?a[1]:void 0,done:true}}};var n;Object.defineProperty(r,"__esModule",{value:true});var i=t(380);var a=t(65);var c=process.env.GITHUB_TOKEN;var u=((n=process.env.GITHUB_REPOSITORY)===null||n===void 0?void 0:n.split("/"))||[],l=u[0],p=u[1];var g=process.env.GITHUB_PR_NUMBER||process.env.PULL_REQUEST_NUMBER||"0";var d=process.env.GITHUB_BASE_REF;if(!c||!l||!p||g==="0"||!d){console.error("Missing required environment variables.");process.exit(1)}var m=new i.Octokit({auth:c});var f=(0,a.default)();function main(){return s(this,void 0,void 0,(function(){var e,r,t,s,n,i;return o(this,(function(o){switch(o.label){case 0:o.trys.push([0,7,,8]);return[4,m.pulls.get({owner:l,repo:p,pull_number:parseInt(g)})];case 1:e=o.sent().data;r=e.base.sha;t=e.head.sha;return[4,f.fetch(["origin",r,t])];case 2:o.sent();return[4,f.diff(["".concat(r,"...").concat(t)])];case 3:s=o.sent();console.log("Checking for empty strings...");n=parseDiffForEmptyStrings(s);if(!(n.length>0))return[3,5];console.error("Empty strings found:");n.forEach((function(e){var r=e.file,t=e.line;console.error("".concat(r,":").concat(t))}));return[4,createReview(n)];case 4:o.sent();process.exit(1);return[3,6];case 5:console.log("No empty strings found.");o.label=6;case 6:return[3,8];case 7:i=o.sent();console.error("An error occurred:",i);process.exit(1);return[3,8];case 8:return[2]}}))}))}function parseDiffForEmptyStrings(e){var r=[];var t=e.split("\n");var s="";var o=0;t.forEach((function(e){if(e.startsWith("+++ b/")){s=e.replace("+++ b/","");o=0}else if(e.startsWith("+")&&!e.startsWith("+++")){o++;if(e.includes('""')){r.push({file:s,line:o,content:e.substring(1)})}}else if(!e.startsWith("-")){o++}}));return r}function createReview(e){return s(this,void 0,void 0,(function(){var r;return o(this,(function(t){switch(t.label){case 0:r=e.map((function(e){return{path:e.file,line:e.line,body:"> [!WARNING]\n> Empty string found, consider another approach. [Read more](https://www.github.com/ubiquity/ts-template/issues/31)."}}));return[4,m.pulls.createReview({owner:l,repo:p,pull_number:parseInt(g),event:"COMMENT",comments:r,body:"> [!WARNING]\n> Empty strings detected in the code. Please review."})];case 1:t.sent();return[2]}}))}))}main().catch((function(e){console.error("Error running empty string check:",e);process.exit(1)}))},117:(e,r,t)=>{"use strict";function __export(e){for(var t in e)if(!r.hasOwnProperty(t))r[t]=e[t]}Object.defineProperty(r,"__esModule",{value:true});__export(t(972))},972:function(e,r,t){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:true});const o=t(896);const n=s(t(830));const i=n.default("@kwsites/file-exists");function check(e,r,t){i(`checking %s`,e);try{const s=o.statSync(e);if(s.isFile()&&r){i(`[OK] path represents a file`);return true}if(s.isDirectory()&&t){i(`[OK] path represents a directory`);return true}i(`[FAIL] path represents something other than a file or directory`);return false}catch(e){if(e.code==="ENOENT"){i(`[FAIL] path is not accessible: %o`,e);return false}i(`[FATAL] %o`,e);throw e}}function exists(e,t=r.READABLE){return check(e,(t&r.FILE)>0,(t&r.FOLDER)>0)}r.exists=exists;r.FILE=1;r.FOLDER=2;r.READABLE=r.FILE+r.FOLDER},997:(e,r)=>{"use strict";Object.defineProperty(r,"__esModule",{value:true});r.createDeferred=r.deferred=void 0;function deferred(){let e;let r;let t="pending";const s=new Promise(((t,s)=>{e=t;r=s}));return{promise:s,done(r){if(t==="pending"){t="resolved";e(r)}},fail(e){if(t==="pending"){t="rejected";r(e)}},get fulfilled(){return t!=="pending"},get status(){return t}}}r.deferred=deferred;r.createDeferred=deferred;r["default"]=deferred},110:(e,r,t)=>{r.formatArgs=formatArgs;r.save=save;r.load=load;r.useColors=useColors;r.storage=localstorage();r.destroy=(()=>{let e=false;return()=>{if(!e){e=true;console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")}}})();r.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"];function useColors(){if(typeof window!=="undefined"&&window.process&&(window.process.type==="renderer"||window.process.__nwjs)){return true}if(typeof navigator!=="undefined"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)){return false}let e;return typeof document!=="undefined"&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||typeof window!=="undefined"&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||typeof navigator!=="undefined"&&navigator.userAgent&&(e=navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/))&&parseInt(e[1],10)>=31||typeof navigator!=="undefined"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)}function formatArgs(r){r[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+r[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff);if(!this.useColors){return}const t="color: "+this.color;r.splice(1,0,t,"color: inherit");let s=0;let o=0;r[0].replace(/%[a-zA-Z%]/g,(e=>{if(e==="%%"){return}s++;if(e==="%c"){o=s}}));r.splice(o,0,t)}r.log=console.debug||console.log||(()=>{});function save(e){try{if(e){r.storage.setItem("debug",e)}else{r.storage.removeItem("debug")}}catch(e){}}function load(){let e;try{e=r.storage.getItem("debug")}catch(e){}if(!e&&typeof process!=="undefined"&&"env"in process){e=process.env.DEBUG}return e}function localstorage(){try{return localStorage}catch(e){}}e.exports=t(897)(r);const{formatters:s}=e.exports;s.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},897:(e,r,t)=>{function setup(e){createDebug.debug=createDebug;createDebug.default=createDebug;createDebug.coerce=coerce;createDebug.disable=disable;createDebug.enable=enable;createDebug.enabled=enabled;createDebug.humanize=t(744);createDebug.destroy=destroy;Object.keys(e).forEach((r=>{createDebug[r]=e[r]}));createDebug.names=[];createDebug.skips=[];createDebug.formatters={};function selectColor(e){let r=0;for(let t=0;t<e.length;t++){r=(r<<5)-r+e.charCodeAt(t);r|=0}return createDebug.colors[Math.abs(r)%createDebug.colors.length]}createDebug.selectColor=selectColor;function createDebug(e){let r;let t=null;let s;let o;function debug(...e){if(!debug.enabled){return}const t=debug;const s=Number(new Date);const o=s-(r||s);t.diff=o;t.prev=r;t.curr=s;r=s;e[0]=createDebug.coerce(e[0]);if(typeof e[0]!=="string"){e.unshift("%O")}let n=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,((r,s)=>{if(r==="%%"){return"%"}n++;const o=createDebug.formatters[s];if(typeof o==="function"){const s=e[n];r=o.call(t,s);e.splice(n,1);n--}return r}));createDebug.formatArgs.call(t,e);const i=t.log||createDebug.log;i.apply(t,e)}debug.namespace=e;debug.useColors=createDebug.useColors();debug.color=createDebug.selectColor(e);debug.extend=extend;debug.destroy=createDebug.destroy;Object.defineProperty(debug,"enabled",{enumerable:true,configurable:false,get:()=>{if(t!==null){return t}if(s!==createDebug.namespaces){s=createDebug.namespaces;o=createDebug.enabled(e)}return o},set:e=>{t=e}});if(typeof createDebug.init==="function"){createDebug.init(debug)}return debug}function extend(e,r){const t=createDebug(this.namespace+(typeof r==="undefined"?":":r)+e);t.log=this.log;return t}function enable(e){createDebug.save(e);createDebug.namespaces=e;createDebug.names=[];createDebug.skips=[];let r;const t=(typeof e==="string"?e:"").split(/[\s,]+/);const s=t.length;for(r=0;r<s;r++){if(!t[r]){continue}e=t[r].replace(/\*/g,".*?");if(e[0]==="-"){createDebug.skips.push(new RegExp("^"+e.slice(1)+"$"))}else{createDebug.names.push(new RegExp("^"+e+"$"))}}}function disable(){const e=[...createDebug.names.map(toNamespace),...createDebug.skips.map(toNamespace).map((e=>"-"+e))].join(",");createDebug.enable("");return e}function enabled(e){if(e[e.length-1]==="*"){return true}let r;let t;for(r=0,t=createDebug.skips.length;r<t;r++){if(createDebug.skips[r].test(e)){return false}}for(r=0,t=createDebug.names.length;r<t;r++){if(createDebug.names[r].test(e)){return true}}return false}function toNamespace(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}function coerce(e){if(e instanceof Error){return e.stack||e.message}return e}function destroy(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")}createDebug.enable(createDebug.load());return createDebug}e.exports=setup},830:(e,r,t)=>{if(typeof process==="undefined"||process.type==="renderer"||process.browser===true||process.__nwjs){e.exports=t(110)}else{e.exports=t(108)}},108:(e,r,t)=>{const s=t(18);const o=t(23);r.init=init;r.log=log;r.formatArgs=formatArgs;r.save=save;r.load=load;r.useColors=useColors;r.destroy=o.deprecate((()=>{}),"Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");r.colors=[6,2,3,4,5,1];try{const e=t(450);if(e&&(e.stderr||e).level>=2){r.colors=[20,21,26,27,32,33,38,39,40,41,42,43,44,45,56,57,62,63,68,69,74,75,76,77,78,79,80,81,92,93,98,99,112,113,128,129,134,135,148,149,160,161,162,163,164,165,166,167,168,169,170,171,172,173,178,179,184,185,196,197,198,199,200,201,202,203,204,205,206,207,208,209,214,215,220,221]}}catch(e){}r.inspectOpts=Object.keys(process.env).filter((e=>/^debug_/i.test(e))).reduce(((e,r)=>{const t=r.substring(6).toLowerCase().replace(/_([a-z])/g,((e,r)=>r.toUpperCase()));let s=process.env[r];if(/^(yes|on|true|enabled)$/i.test(s)){s=true}else if(/^(no|off|false|disabled)$/i.test(s)){s=false}else if(s==="null"){s=null}else{s=Number(s)}e[t]=s;return e}),{});function useColors(){return"colors"in r.inspectOpts?Boolean(r.inspectOpts.colors):s.isatty(process.stderr.fd)}function formatArgs(r){const{namespace:t,useColors:s}=this;if(s){const s=this.color;const o="[3"+(s<8?s:"8;5;"+s);const n=`  ${o};1m${t} [0m`;r[0]=n+r[0].split("\n").join("\n"+n);r.push(o+"m+"+e.exports.humanize(this.diff)+"[0m")}else{r[0]=getDate()+t+" "+r[0]}}function getDate(){if(r.inspectOpts.hideDate){return""}return(new Date).toISOString()+" "}function log(...e){return process.stderr.write(o.formatWithOptions(r.inspectOpts,...e)+"\n")}function save(e){if(e){process.env.DEBUG=e}else{delete process.env.DEBUG}}function load(){return process.env.DEBUG}function init(e){e.inspectOpts={};const t=Object.keys(r.inspectOpts);for(let s=0;s<t.length;s++){e.inspectOpts[t[s]]=r.inspectOpts[t[s]]}}e.exports=t(897)(r);const{formatters:n}=e.exports;n.o=function(e){this.inspectOpts.colors=this.useColors;return o.inspect(e,this.inspectOpts).split("\n").map((e=>e.trim())).join(" ")};n.O=function(e){this.inspectOpts.colors=this.useColors;return o.inspect(e,this.inspectOpts)}},813:e=>{"use strict";e.exports=(e,r=process.argv)=>{const t=e.startsWith("-")?"":e.length===1?"-":"--";const s=r.indexOf(t+e);const o=r.indexOf("--");return s!==-1&&(o===-1||s<o)}},744:e=>{var r=1e3;var t=r*60;var s=t*60;var o=s*24;var n=o*7;var i=o*365.25;e.exports=function(e,r){r=r||{};var t=typeof e;if(t==="string"&&e.length>0){return parse(e)}else if(t==="number"&&isFinite(e)){return r.long?fmtLong(e):fmtShort(e)}throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))};function parse(e){e=String(e);if(e.length>100){return}var a=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(!a){return}var c=parseFloat(a[1]);var u=(a[2]||"ms").toLowerCase();switch(u){case"years":case"year":case"yrs":case"yr":case"y":return c*i;case"weeks":case"week":case"w":return c*n;case"days":case"day":case"d":return c*o;case"hours":case"hour":case"hrs":case"hr":case"h":return c*s;case"minutes":case"minute":case"mins":case"min":case"m":return c*t;case"seconds":case"second":case"secs":case"sec":case"s":return c*r;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return c;default:return undefined}}function fmtShort(e){var n=Math.abs(e);if(n>=o){return Math.round(e/o)+"d"}if(n>=s){return Math.round(e/s)+"h"}if(n>=t){return Math.round(e/t)+"m"}if(n>=r){return Math.round(e/r)+"s"}return e+"ms"}function fmtLong(e){var n=Math.abs(e);if(n>=o){return plural(e,n,o,"day")}if(n>=s){return plural(e,n,s,"hour")}if(n>=t){return plural(e,n,t,"minute")}if(n>=r){return plural(e,n,r,"second")}return e+" ms"}function plural(e,r,t,s){var o=r>=t*1.5;return Math.round(e/t)+" "+s+(o?"s":"")}},65:(e,r,t)=>{"use strict";var s=Object.create;var o=Object.defineProperty;var n=Object.defineProperties;var i=Object.getOwnPropertyDescriptor;var a=Object.getOwnPropertyDescriptors;var c=Object.getOwnPropertyNames;var u=Object.getOwnPropertySymbols;var l=Object.getPrototypeOf;var p=Object.prototype.hasOwnProperty;var g=Object.prototype.propertyIsEnumerable;var __defNormalProp=(e,r,t)=>r in e?o(e,r,{enumerable:true,configurable:true,writable:true,value:t}):e[r]=t;var __spreadValues=(e,r)=>{for(var t in r||(r={}))if(p.call(r,t))__defNormalProp(e,t,r[t]);if(u)for(var t of u(r)){if(g.call(r,t))__defNormalProp(e,t,r[t])}return e};var __spreadProps=(e,r)=>n(e,a(r));var __esm=(e,r)=>function __init(){return e&&(r=(0,e[c(e)[0]])(e=0)),r};var __commonJS=(e,r)=>function __require(){return r||(0,e[c(e)[0]])((r={exports:{}}).exports,r),r.exports};var __export=(e,r)=>{for(var t in r)o(e,t,{get:r[t],enumerable:true})};var __copyProps=(e,r,t,s)=>{if(r&&typeof r==="object"||typeof r==="function"){for(let n of c(r))if(!p.call(e,n)&&n!==t)o(e,n,{get:()=>r[n],enumerable:!(s=i(r,n))||s.enumerable})}return e};var __toESM=(e,r,t)=>(t=e!=null?s(l(e)):{},__copyProps(r||!e||!e.__esModule?o(t,"default",{value:e,enumerable:true}):t,e));var __toCommonJS=e=>__copyProps(o({},"__esModule",{value:true}),e);var __async=(e,r,t)=>new Promise(((s,o)=>{var fulfilled=e=>{try{step(t.next(e))}catch(e){o(e)}};var rejected=e=>{try{step(t.throw(e))}catch(e){o(e)}};var step=e=>e.done?s(e.value):Promise.resolve(e.value).then(fulfilled,rejected);step((t=t.apply(e,r)).next())}));var d;var m=__esm({"src/lib/errors/git-error.ts"(){"use strict";d=class extends Error{constructor(e,r){super(r);this.task=e;Object.setPrototypeOf(this,new.target.prototype)}}}});var f;var h=__esm({"src/lib/errors/git-response-error.ts"(){"use strict";m();f=class extends d{constructor(e,r){super(void 0,r||String(e));this.git=e}}}});function pathspec(...e){const r=new String(e);T.set(r,e);return r}function isPathSpec(e){return e instanceof String&&T.has(e)}function toPaths(e){return T.get(e)||[]}var T;var b=__esm({"src/lib/args/pathspec.ts"(){"use strict";T=new WeakMap}});var E;var w=__esm({"src/lib/errors/git-construct-error.ts"(){"use strict";m();E=class extends d{constructor(e,r){super(void 0,r);this.config=e}}}});var _;var k=__esm({"src/lib/errors/git-plugin-error.ts"(){"use strict";m();_=class extends d{constructor(e,r,t){super(e,t);this.task=e;this.plugin=r;Object.setPrototypeOf(this,new.target.prototype)}}}});var v;var y=__esm({"src/lib/errors/task-configuration-error.ts"(){"use strict";m();v=class extends d{constructor(e){super(void 0,e)}}}});function asFunction(e){return typeof e==="function"?e:C}function isUserFunction(e){return typeof e==="function"&&e!==C}function splitOn(e,r){const t=e.indexOf(r);if(t<=0){return[e,""]}return[e.substr(0,t),e.substr(t+1)]}function first(e,r=0){return isArrayLike(e)&&e.length>r?e[r]:void 0}function last(e,r=0){if(isArrayLike(e)&&e.length>r){return e[e.length-1-r]}}function isArrayLike(e){return!!(e&&typeof e.length==="number")}function toLinesWithContent(e="",r=true,t="\n"){return e.split(t).reduce(((e,t)=>{const s=r?t.trim():t;if(s){e.push(s)}return e}),[])}function forEachLineWithContent(e,r){return toLinesWithContent(e,true).map((e=>r(e)))}function folderExists(e){return(0,G.exists)(e,G.FOLDER)}function append(e,r){if(Array.isArray(e)){if(!e.includes(r)){e.push(r)}}else{e.add(r)}return r}function including(e,r){if(Array.isArray(e)&&!e.includes(r)){e.push(r)}return e}function remove(e,r){if(Array.isArray(e)){const t=e.indexOf(r);if(t>=0){e.splice(t,1)}}else{e.delete(r)}return r}function asArray(e){return Array.isArray(e)?e:[e]}function asCamelCase(e){return e.replace(/[\s-]+(.)/g,((e,r)=>r.toUpperCase()))}function asStringArray(e){return asArray(e).map(String)}function asNumber(e,r=0){if(e==null){return r}const t=parseInt(e,10);return isNaN(t)?r:t}function prefixedArray(e,r){const t=[];for(let s=0,o=e.length;s<o;s++){t.push(r,e[s])}return t}function bufferToString(e){return(Array.isArray(e)?Buffer.concat(e):e).toString("utf-8")}function pick(e,r){return Object.assign({},...r.map((r=>r in e?{[r]:e[r]}:{})))}function delay(e=0){return new Promise((r=>setTimeout(r,e)))}function orVoid(e){if(e===false){return void 0}return e}var G,O,C,P;var F=__esm({"src/lib/utils/util.ts"(){"use strict";G=t(117);O="\0";C=()=>{};P=Object.prototype.toString.call.bind(Object.prototype.toString)}});function filterType(e,r,t){if(r(e)){return e}return arguments.length>2?t:void 0}function filterPrimitives(e,r){const t=isPathSpec(e)?"string":typeof e;return/number|string|boolean/.test(t)&&(!r||!r.includes(t))}function filterPlainObject(e){return!!e&&P(e)==="[object Object]"}function filterFunction(e){return typeof e==="function"}var A,S,R,D,U;var L=__esm({"src/lib/utils/argument-filters.ts"(){"use strict";F();b();A=e=>Array.isArray(e);S=e=>typeof e==="string";R=e=>Array.isArray(e)&&e.every(S);D=e=>S(e)||Array.isArray(e)&&e.every(S);U=e=>{if(e==null||"number|boolean|function".includes(typeof e)){return false}return Array.isArray(e)||typeof e==="string"||typeof e.length==="number"}}});var x;var j=__esm({"src/lib/utils/exit-codes.ts"(){"use strict";x=(e=>{e[e["SUCCESS"]=0]="SUCCESS";e[e["ERROR"]=1]="ERROR";e[e["NOT_FOUND"]=-2]="NOT_FOUND";e[e["UNCLEAN"]=128]="UNCLEAN";return e})(x||{})}});var I;var M=__esm({"src/lib/utils/git-output-streams.ts"(){"use strict";I=class{constructor(e,r){this.stdOut=e;this.stdErr=r}asStrings(){return new I(this.stdOut.toString("utf8"),this.stdErr.toString("utf8"))}}}});var q,B;var N=__esm({"src/lib/utils/line-parser.ts"(){"use strict";q=class{constructor(e,r){this.matches=[];this.parse=(e,r)=>{this.resetMatches();if(!this._regExp.every(((r,t)=>this.addMatch(r,t,e(t))))){return false}return this.useMatches(r,this.prepareMatches())!==false};this._regExp=Array.isArray(e)?e:[e];if(r){this.useMatches=r}}useMatches(e,r){throw new Error(`LineParser:useMatches not implemented`)}resetMatches(){this.matches.length=0}prepareMatches(){return this.matches}addMatch(e,r,t){const s=t&&e.exec(t);if(s){this.pushMatch(r,s)}return!!s}pushMatch(e,r){this.matches.push(...r.slice(1))}};B=class extends q{addMatch(e,r,t){return/^remote:\s/.test(String(t))&&super.addMatch(e,r,t)}pushMatch(e,r){if(e>0||r.length>1){super.pushMatch(e,r)}}}}});function createInstanceConfig(...e){const r=process.cwd();const t=Object.assign(__spreadValues({baseDir:r},$),...e.filter((e=>typeof e==="object"&&e)));t.baseDir=t.baseDir||r;t.trimmed=t.trimmed===true;return t}var $;var W=__esm({"src/lib/utils/simple-git-options.ts"(){"use strict";$={binary:"git",maxConcurrentProcesses:5,config:[],trimmed:false}}});function appendTaskOptions(e,r=[]){if(!filterPlainObject(e)){return r}return Object.keys(e).reduce(((r,t)=>{const s=e[t];if(isPathSpec(s)){r.push(s)}else if(filterPrimitives(s,["boolean"])){r.push(t+"="+s)}else{r.push(t)}return r}),r)}function getTrailingOptions(e,r=0,t=false){const s=[];for(let t=0,o=r<0?e.length:r;t<o;t++){if("string|number".includes(typeof e[t])){s.push(String(e[t]))}}appendTaskOptions(trailingOptionsArgument(e),s);if(!t){s.push(...trailingArrayArgument(e))}return s}function trailingArrayArgument(e){const r=typeof last(e)==="function";return filterType(last(e,r?1:0),A,[])}function trailingOptionsArgument(e){const r=filterFunction(last(e));return filterType(last(e,r?1:0),filterPlainObject)}function trailingFunctionArgument(e,r=true){const t=asFunction(last(e));return r||isUserFunction(t)?t:void 0}var z=__esm({"src/lib/utils/task-options.ts"(){"use strict";L();F();b()}});function callTaskParser(e,r){return e(r.stdOut,r.stdErr)}function parseStringResponse(e,r,t,s=true){asArray(t).forEach((t=>{for(let o=toLinesWithContent(t,s),n=0,i=o.length;n<i;n++){const line=(e=0)=>{if(n+e>=i){return}return o[n+e]};r.some((({parse:r})=>r(line,e)))}}));return e}var H=__esm({"src/lib/utils/task-parser.ts"(){"use strict";F()}});var V={};__export(V,{ExitCodes:()=>x,GitOutputStreams:()=>I,LineParser:()=>q,NOOP:()=>C,NULL:()=>O,RemoteLineParser:()=>B,append:()=>append,appendTaskOptions:()=>appendTaskOptions,asArray:()=>asArray,asCamelCase:()=>asCamelCase,asFunction:()=>asFunction,asNumber:()=>asNumber,asStringArray:()=>asStringArray,bufferToString:()=>bufferToString,callTaskParser:()=>callTaskParser,createInstanceConfig:()=>createInstanceConfig,delay:()=>delay,filterArray:()=>A,filterFunction:()=>filterFunction,filterHasLength:()=>U,filterPlainObject:()=>filterPlainObject,filterPrimitives:()=>filterPrimitives,filterString:()=>S,filterStringArray:()=>R,filterStringOrStringArray:()=>D,filterType:()=>filterType,first:()=>first,folderExists:()=>folderExists,forEachLineWithContent:()=>forEachLineWithContent,getTrailingOptions:()=>getTrailingOptions,including:()=>including,isUserFunction:()=>isUserFunction,last:()=>last,objectToString:()=>P,orVoid:()=>orVoid,parseStringResponse:()=>parseStringResponse,pick:()=>pick,prefixedArray:()=>prefixedArray,remove:()=>remove,splitOn:()=>splitOn,toLinesWithContent:()=>toLinesWithContent,trailingFunctionArgument:()=>trailingFunctionArgument,trailingOptionsArgument:()=>trailingOptionsArgument});var K=__esm({"src/lib/utils/index.ts"(){"use strict";L();j();M();N();W();z();H();F()}});var J={};__export(J,{CheckRepoActions:()=>Y,checkIsBareRepoTask:()=>checkIsBareRepoTask,checkIsRepoRootTask:()=>checkIsRepoRootTask,checkIsRepoTask:()=>checkIsRepoTask});function checkIsRepoTask(e){switch(e){case"bare":return checkIsBareRepoTask();case"root":return checkIsRepoRootTask()}const r=["rev-parse","--is-inside-work-tree"];return{commands:r,format:"utf-8",onError:Q,parser:Z}}function checkIsRepoRootTask(){const e=["rev-parse","--git-dir"];return{commands:e,format:"utf-8",onError:Q,parser(e){return/^\.(git)?$/.test(e.trim())}}}function checkIsBareRepoTask(){const e=["rev-parse","--is-bare-repository"];return{commands:e,format:"utf-8",onError:Q,parser:Z}}function isNotRepoMessage(e){return/(Not a git repository|Kein Git-Repository)/i.test(String(e))}var Y,Q,Z;var X=__esm({"src/lib/tasks/check-is-repo.ts"(){"use strict";K();Y=(e=>{e["BARE"]="bare";e["IN_TREE"]="tree";e["IS_REPO_ROOT"]="root";return e})(Y||{});Q=({exitCode:e},r,t,s)=>{if(e===128&&isNotRepoMessage(r)){return t(Buffer.from("false"))}s(r)};Z=e=>e.trim()==="true"}});function cleanSummaryParser(e,r){const t=new ee(e);const s=e?te:re;toLinesWithContent(r).forEach((e=>{const r=e.replace(s,"");t.paths.push(r);(se.test(r)?t.folders:t.files).push(r)}));return t}var ee,re,te,se;var oe=__esm({"src/lib/responses/CleanSummary.ts"(){"use strict";K();ee=class{constructor(e){this.dryRun=e;this.paths=[];this.files=[];this.folders=[]}};re=/^[a-z]+\s*/i;te=/^[a-z]+\s+[a-z]+\s*/i;se=/\/$/}});var ne={};__export(ne,{EMPTY_COMMANDS:()=>ie,adhocExecTask:()=>adhocExecTask,configurationErrorTask:()=>configurationErrorTask,isBufferTask:()=>isBufferTask,isEmptyTask:()=>isEmptyTask,straightThroughBufferTask:()=>straightThroughBufferTask,straightThroughStringTask:()=>straightThroughStringTask});function adhocExecTask(e){return{commands:ie,format:"empty",parser:e}}function configurationErrorTask(e){return{commands:ie,format:"empty",parser(){throw typeof e==="string"?new v(e):e}}}function straightThroughStringTask(e,r=false){return{commands:e,format:"utf-8",parser(e){return r?String(e).trim():e}}}function straightThroughBufferTask(e){return{commands:e,format:"buffer",parser(e){return e}}}function isBufferTask(e){return e.format==="buffer"}function isEmptyTask(e){return e.format==="empty"||!e.commands.length}var ie;var ae=__esm({"src/lib/tasks/task.ts"(){"use strict";y();ie=[]}});var ce={};__export(ce,{CONFIG_ERROR_INTERACTIVE_MODE:()=>ue,CONFIG_ERROR_MODE_REQUIRED:()=>le,CONFIG_ERROR_UNKNOWN_OPTION:()=>pe,CleanOptions:()=>ge,cleanTask:()=>cleanTask,cleanWithOptionsTask:()=>cleanWithOptionsTask,isCleanOptionsArray:()=>isCleanOptionsArray});function cleanWithOptionsTask(e,r){const{cleanMode:t,options:s,valid:o}=getCleanOptions(e);if(!t){return configurationErrorTask(le)}if(!o.options){return configurationErrorTask(pe+JSON.stringify(e))}s.push(...r);if(s.some(isInteractiveMode)){return configurationErrorTask(ue)}return cleanTask(t,s)}function cleanTask(e,r){const t=["clean",`-${e}`,...r];return{commands:t,format:"utf-8",parser(r){return cleanSummaryParser(e==="n",r)}}}function isCleanOptionsArray(e){return Array.isArray(e)&&e.every((e=>de.has(e)))}function getCleanOptions(e){let r;let t=[];let s={cleanMode:false,options:true};e.replace(/[^a-z]i/g,"").split("").forEach((e=>{if(isCleanMode(e)){r=e;s.cleanMode=true}else{s.options=s.options&&isKnownOption(t[t.length]=`-${e}`)}}));return{cleanMode:r,options:t,valid:s}}function isCleanMode(e){return e==="f"||e==="n"}function isKnownOption(e){return/^-[a-z]$/i.test(e)&&de.has(e.charAt(1))}function isInteractiveMode(e){if(/^-[^\-]/.test(e)){return e.indexOf("i")>0}return e==="--interactive"}var ue,le,pe,ge,de;var me=__esm({"src/lib/tasks/clean.ts"(){"use strict";oe();K();ae();ue="Git clean interactive mode is not supported";le='Git clean mode parameter ("n" or "f") is required';pe="Git clean unknown option found in: ";ge=(e=>{e["DRY_RUN"]="n";e["FORCE"]="f";e["IGNORED_INCLUDED"]="x";e["IGNORED_ONLY"]="X";e["EXCLUDING"]="e";e["QUIET"]="q";e["RECURSIVE"]="d";return e})(ge||{});de=new Set(["i",...asStringArray(Object.values(ge))])}});function configListParser(e){const r=new fe;for(const t of configParser(e)){r.addValue(t.file,String(t.key),t.value)}return r}function configGetParser(e,r){let t=null;const s=[];const o=new Map;for(const n of configParser(e,r)){if(n.key!==r){continue}s.push(t=n.value);if(!o.has(n.file)){o.set(n.file,[])}o.get(n.file).push(t)}return{key:r,paths:Array.from(o.keys()),scopes:o,value:t,values:s}}function configFilePath(e){return e.replace(/^(file):/,"")}function*configParser(e,r=null){const t=e.split("\0");for(let e=0,s=t.length-1;e<s;){const s=configFilePath(t[e++]);let o=t[e++];let n=r;if(o.includes("\n")){const e=splitOn(o,"\n");n=e[0];o=e[1]}yield{file:s,key:n,value:o}}}var fe;var he=__esm({"src/lib/responses/ConfigList.ts"(){"use strict";K();fe=class{constructor(){this.files=[];this.values=Object.create(null)}get all(){if(!this._all){this._all=this.files.reduce(((e,r)=>Object.assign(e,this.values[r])),{})}return this._all}addFile(e){if(!(e in this.values)){const r=last(this.files);this.values[e]=r?Object.create(this.values[r]):{};this.files.push(e)}return this.values[e]}addValue(e,r,t){const s=this.addFile(e);if(!s.hasOwnProperty(r)){s[r]=t}else if(Array.isArray(s[r])){s[r].push(t)}else{s[r]=[s[r],t]}this._all=void 0}}}});function asConfigScope(e,r){if(typeof e==="string"&&Te.hasOwnProperty(e)){return e}return r}function addConfigTask(e,r,t,s){const o=["config",`--${s}`];if(t){o.push("--add")}o.push(e,r);return{commands:o,format:"utf-8",parser(e){return e}}}function getConfigTask(e,r){const t=["config","--null","--show-origin","--get-all",e];if(r){t.splice(1,0,`--${r}`)}return{commands:t,format:"utf-8",parser(r){return configGetParser(r,e)}}}function listConfigTask(e){const r=["config","--list","--show-origin","--null"];if(e){r.push(`--${e}`)}return{commands:r,format:"utf-8",parser(e){return configListParser(e)}}}function config_default(){return{addConfig(e,r,...t){return this._runTask(addConfigTask(e,r,t[0]===true,asConfigScope(t[1],"local")),trailingFunctionArgument(arguments))},getConfig(e,r){return this._runTask(getConfigTask(e,asConfigScope(r,void 0)),trailingFunctionArgument(arguments))},listConfig(...e){return this._runTask(listConfigTask(asConfigScope(e[0],void 0)),trailingFunctionArgument(arguments))}}}var Te;var be=__esm({"src/lib/tasks/config.ts"(){"use strict";he();K();Te=(e=>{e["system"]="system";e["global"]="global";e["local"]="local";e["worktree"]="worktree";return e})(Te||{})}});function isDiffNameStatus(e){return we.has(e)}var Ee,we;var _e=__esm({"src/lib/tasks/diff-name-status.ts"(){"use strict";Ee=(e=>{e["ADDED"]="A";e["COPIED"]="C";e["DELETED"]="D";e["MODIFIED"]="M";e["RENAMED"]="R";e["CHANGED"]="T";e["UNMERGED"]="U";e["UNKNOWN"]="X";e["BROKEN"]="B";return e})(Ee||{});we=new Set(Object.values(Ee))}});function grepQueryBuilder(...e){return(new Ge).param(...e)}function parseGrep(e){const r=new Set;const t={};forEachLineWithContent(e,(e=>{const[s,o,n]=e.split(O);r.add(s);(t[s]=t[s]||[]).push({line:asNumber(o),path:s,preview:n})}));return{paths:r,results:t}}function grep_default(){return{grep(e){const r=trailingFunctionArgument(arguments);const t=getTrailingOptions(arguments);for(const e of ke){if(t.includes(e)){return this._runTask(configurationErrorTask(`git.grep: use of "${e}" is not supported.`),r)}}if(typeof e==="string"){e=grepQueryBuilder().param(e)}const s=["grep","--null","-n","--full-name",...t,...e];return this._runTask({commands:s,format:"utf-8",parser(e){return parseGrep(e)}},r)}}}var ke,ve,ye,Ge;var Oe=__esm({"src/lib/tasks/grep.ts"(){"use strict";K();ae();ke=["-h"];ve=Symbol("grepQuery");Ge=class{constructor(){this[ye]=[]}*[(ye=ve,Symbol.iterator)](){for(const e of this[ve]){yield e}}and(...e){e.length&&this[ve].push("--and","(",...prefixedArray(e,"-e"),")");return this}param(...e){this[ve].push(...prefixedArray(e,"-e"));return this}}}});var Ce={};__export(Ce,{ResetMode:()=>Pe,getResetMode:()=>getResetMode,resetTask:()=>resetTask});function resetTask(e,r){const t=["reset"];if(isValidResetMode(e)){t.push(`--${e}`)}t.push(...r);return straightThroughStringTask(t)}function getResetMode(e){if(isValidResetMode(e)){return e}switch(typeof e){case"string":case"undefined":return"soft"}return}function isValidResetMode(e){return Fe.includes(e)}var Pe,Fe;var Ae=__esm({"src/lib/tasks/reset.ts"(){"use strict";ae();Pe=(e=>{e["MIXED"]="mixed";e["SOFT"]="soft";e["HARD"]="hard";e["MERGE"]="merge";e["KEEP"]="keep";return e})(Pe||{});Fe=Array.from(Object.values(Pe))}});var Se={};__export(Se,{CheckRepoActions:()=>Y,CleanOptions:()=>ge,DiffNameStatus:()=>Ee,GitConfigScope:()=>Te,GitConstructError:()=>E,GitError:()=>d,GitPluginError:()=>_,GitResponseError:()=>f,ResetMode:()=>Pe,TaskConfigurationError:()=>v,grepQueryBuilder:()=>grepQueryBuilder,pathspec:()=>pathspec});var Re=__esm({"src/lib/api.ts"(){"use strict";b();w();m();k();h();y();X();me();be();_e();Oe();Ae()}});function abortPlugin(e){if(!e){return}const r={type:"spawn.after",action(r,t){function kill(){t.kill(new _(void 0,"abort","Abort signal received"))}e.addEventListener("abort",kill);t.spawned.on("close",(()=>e.removeEventListener("abort",kill)))}};const t={type:"spawn.before",action(r,t){if(e.aborted){t.kill(new _(void 0,"abort","Abort already signaled"))}}};return[t,r]}var De=__esm({"src/lib/plugins/abort-plugin.ts"(){"use strict";k()}});function isConfigSwitch(e){return typeof e==="string"&&e.trim().toLowerCase()==="-c"}function preventProtocolOverride(e,r){if(!isConfigSwitch(e)){return}if(!/^\s*protocol(.[a-z]+)?.allow/.test(r)){return}throw new _(void 0,"unsafe","Configuring protocol.allow is not permitted without enabling allowUnsafeExtProtocol")}function preventUploadPack(e,r){if(/^\s*--(upload|receive)-pack/.test(e)){throw new _(void 0,"unsafe",`Use of --upload-pack or --receive-pack is not permitted without enabling allowUnsafePack`)}if(r==="clone"&&/^\s*-u\b/.test(e)){throw new _(void 0,"unsafe",`Use of clone with option -u is not permitted without enabling allowUnsafePack`)}if(r==="push"&&/^\s*--exec\b/.test(e)){throw new _(void 0,"unsafe",`Use of push with option --exec is not permitted without enabling allowUnsafePack`)}}function blockUnsafeOperationsPlugin({allowUnsafeProtocolOverride:e=false,allowUnsafePack:r=false}={}){return{type:"spawn.args",action(t,s){t.forEach(((o,n)=>{const i=n<t.length?t[n+1]:"";e||preventProtocolOverride(o,i);r||preventUploadPack(o,s.method)}));return t}}}var Ue=__esm({"src/lib/plugins/block-unsafe-operations-plugin.ts"(){"use strict";k()}});function commandConfigPrefixingPlugin(e){const r=prefixedArray(e,"-c");return{type:"spawn.args",action(e){return[...r,...e]}}}var Le=__esm({"src/lib/plugins/command-config-prefixing-plugin.ts"(){"use strict";K()}});function completionDetectionPlugin({onClose:e=true,onExit:r=50}={}){function createEvents(){let t=-1;const s={close:(0,xe.deferred)(),closeTimeout:(0,xe.deferred)(),exit:(0,xe.deferred)(),exitTimeout:(0,xe.deferred)()};const o=Promise.race([e===false?je:s.closeTimeout.promise,r===false?je:s.exitTimeout.promise]);configureTimeout(e,s.close,s.closeTimeout);configureTimeout(r,s.exit,s.exitTimeout);return{close(e){t=e;s.close.done()},exit(e){t=e;s.exit.done()},get exitCode(){return t},result:o}}function configureTimeout(e,r,t){if(e===false){return}(e===true?r.promise:r.promise.then((()=>delay(e)))).then(t.done)}return{type:"spawn.after",action(e,r){return __async(this,arguments,(function*(e,{spawned:r,close:t}){var s,o;const n=createEvents();let i=true;let quickClose=()=>void(i=false);(s=r.stdout)==null?void 0:s.on("data",quickClose);(o=r.stderr)==null?void 0:o.on("data",quickClose);r.on("error",quickClose);r.on("close",(e=>n.close(e)));r.on("exit",(e=>n.exit(e)));try{yield n.result;if(i){yield delay(50)}t(n.exitCode)}catch(e){t(n.exitCode,e)}}))}}}var xe,je;var Ie=__esm({"src/lib/plugins/completion-detection.plugin.ts"(){"use strict";xe=t(997);K();je=(0,xe.deferred)().promise}});function isBadArgument(e){return!e||!/^([a-z]:)?([a-z0-9/.\\_-]+)$/i.test(e)}function toBinaryConfig(e,r){if(e.length<1||e.length>2){throw new _(void 0,"binary",Me)}const t=e.some(isBadArgument);if(t){if(r){console.warn(qe)}else{throw new _(void 0,"binary",qe)}}const[s,o]=e;return{binary:s,prefix:o}}function customBinaryPlugin(e,r=["git"],t=false){let s=toBinaryConfig(asArray(r),t);e.on("binary",(e=>{s=toBinaryConfig(asArray(e),t)}));e.append("spawn.binary",(()=>s.binary));e.append("spawn.args",(e=>s.prefix?[s.prefix,...e]:e))}var Me,qe;var Be=__esm({"src/lib/plugins/custom-binary.plugin.ts"(){"use strict";k();K();Me=`Invalid value supplied for custom binary, requires a single string or an array containing either one or two strings`;qe=`Invalid value supplied for custom binary, restricted characters must be removed or supply the unsafe.allowUnsafeCustomBinary option`}});function isTaskError(e){return!!(e.exitCode&&e.stdErr.length)}function getErrorMessage(e){return Buffer.concat([...e.stdOut,...e.stdErr])}function errorDetectionHandler(e=false,r=isTaskError,t=getErrorMessage){return(s,o)=>{if(!e&&s||!r(o)){return s}return t(o)}}function errorDetectionPlugin(e){return{type:"task.error",action(r,t){const s=e(r.error,{stdErr:t.stdErr,stdOut:t.stdOut,exitCode:t.exitCode});if(Buffer.isBuffer(s)){return{error:new d(void 0,s.toString("utf-8"))}}return{error:s}}}}var Ne=__esm({"src/lib/plugins/error-detection.plugin.ts"(){"use strict";m()}});var $e,We;var ze=__esm({"src/lib/plugins/plugin-store.ts"(){"use strict";$e=t(474);K();We=class{constructor(){this.plugins=new Set;this.events=new $e.EventEmitter}on(e,r){this.events.on(e,r)}reconfigure(e,r){this.events.emit(e,r)}append(e,r){const t=append(this.plugins,{type:e,action:r});return()=>this.plugins.delete(t)}add(e){const r=[];asArray(e).forEach((e=>e&&this.plugins.add(append(r,e))));return()=>{r.forEach((e=>this.plugins.delete(e)))}}exec(e,r,t){let s=r;const o=Object.freeze(Object.create(t));for(const r of this.plugins){if(r.type===e){s=r.action(s,o)}}return s}}}});function progressMonitorPlugin(e){const r="--progress";const t=["checkout","clone","fetch","pull","push"];const s={type:"spawn.after",action(t,s){var o;if(!s.commands.includes(r)){return}(o=s.spawned.stderr)==null?void 0:o.on("data",(r=>{const t=/^([\s\S]+?):\s*(\d+)% \((\d+)\/(\d+)\)/.exec(r.toString("utf8"));if(!t){return}e({method:s.method,stage:progressEventStage(t[1]),progress:asNumber(t[2]),processed:asNumber(t[3]),total:asNumber(t[4])})}))}};const o={type:"spawn.args",action(e,s){if(!t.includes(s.method)){return e}return including(e,r)}};return[o,s]}function progressEventStage(e){return String(e.toLowerCase().split(" ",1))||"unknown"}var He=__esm({"src/lib/plugins/progress-monitor-plugin.ts"(){"use strict";K()}});var Ve=__esm({"src/lib/plugins/simple-git-plugin.ts"(){"use strict"}});function spawnOptionsPlugin(e){const r=pick(e,["uid","gid"]);return{type:"spawn.options",action(e){return __spreadValues(__spreadValues({},r),e)}}}var Ke=__esm({"src/lib/plugins/spawn-options-plugin.ts"(){"use strict";K()}});function timeoutPlugin({block:e,stdErr:r=true,stdOut:t=true}){if(e>0){return{type:"spawn.after",action(s,o){var n,i;let a;function wait(){a&&clearTimeout(a);a=setTimeout(kill,e)}function stop(){var e,r;(e=o.spawned.stdout)==null?void 0:e.off("data",wait);(r=o.spawned.stderr)==null?void 0:r.off("data",wait);o.spawned.off("exit",stop);o.spawned.off("close",stop);a&&clearTimeout(a)}function kill(){stop();o.kill(new _(void 0,"timeout",`block timeout reached`))}t&&((n=o.spawned.stdout)==null?void 0:n.on("data",wait));r&&((i=o.spawned.stderr)==null?void 0:i.on("data",wait));o.spawned.on("exit",stop);o.spawned.on("close",stop);wait()}}}}var Je=__esm({"src/lib/plugins/timout-plugin.ts"(){"use strict";k()}});var Ye=__esm({"src/lib/plugins/index.ts"(){"use strict";De();Ue();Le();Ie();Be();Ne();ze();He();Ve();Ke();Je()}});function suffixPathsPlugin(){return{type:"spawn.args",action(e){const r=[];let t;function append2(e){(t=t||[]).push(...e)}for(let t=0;t<e.length;t++){const s=e[t];if(isPathSpec(s)){append2(toPaths(s));continue}if(s==="--"){append2(e.slice(t+1).flatMap((e=>isPathSpec(e)&&toPaths(e)||e)));break}r.push(s)}return!t?r:[...r,"--",...t.map(String)]}}}var Qe=__esm({"src/lib/plugins/suffix-paths.plugin.ts"(){"use strict";b()}});function createLog(){return(0,Ze.default)("simple-git")}function prefixedLogger(e,r,t){if(!r||!String(r).replace(/\s*/,"")){return!t?e:(r,...s)=>{e(r,...s);t(r,...s)}}return(s,...o)=>{e(`%s ${s}`,r,...o);if(t){t(s,...o)}}}function childLoggerName(e,r,{namespace:t}){if(typeof e==="string"){return e}const s=r&&r.namespace||"";if(s.startsWith(t)){return s.substr(t.length+1)}return s||t}function createLogger(e,r,t,s=createLog()){const o=e&&`[${e}]`||"";const n=[];const i=typeof r==="string"?s.extend(r):r;const a=childLoggerName(filterType(r,S),i,s);return step(t);function sibling(r,t){return append(n,createLogger(e,a.replace(/^[^:]+/,r),t,s))}function step(r){const t=r&&`[${r}]`||"";const n=i&&prefixedLogger(i,t)||C;const a=prefixedLogger(s,`${o} ${t}`,n);return Object.assign(i?n:a,{label:e,sibling:sibling,info:a,step:step})}}var Ze;var Xe=__esm({"src/lib/git-logger.ts"(){"use strict";Ze=__toESM(t(567));K();Ze.default.formatters.L=e=>String(U(e)?e.length:"-");Ze.default.formatters.B=e=>{if(Buffer.isBuffer(e)){return e.toString("utf8")}return P(e)}}});var er,rr;var tr=__esm({"src/lib/runners/tasks-pending-queue.ts"(){"use strict";m();Xe();er=class{constructor(e="GitExecutor"){this.logLabel=e;this._queue=new Map}withProgress(e){return this._queue.get(e)}createProgress(e){const r=er.getName(e.commands[0]);const t=createLogger(this.logLabel,r);return{task:e,logger:t,name:r}}push(e){const r=this.createProgress(e);r.logger("Adding task to the queue, commands = %o",e.commands);this._queue.set(e,r);return r}fatal(e){for(const[r,{logger:t}]of Array.from(this._queue.entries())){if(r===e.task){t.info(`Failed %o`,e);t(`Fatal exception, any as-yet un-started tasks run through this executor will not be attempted`)}else{t.info(`A fatal exception occurred in a previous task, the queue has been purged: %o`,e.message)}this.complete(r)}if(this._queue.size!==0){throw new Error(`Queue size should be zero after fatal: ${this._queue.size}`)}}complete(e){const r=this.withProgress(e);if(r){this._queue.delete(e)}}attempt(e){const r=this.withProgress(e);if(!r){throw new d(void 0,"TasksPendingQueue: attempt called for an unknown task")}r.logger("Starting task");return r}static getName(e="empty"){return`task:${e}:${++er.counter}`}};rr=er;rr.counter=0}});function pluginContext(e,r){return{method:first(e.commands)||"",commands:r}}function onErrorReceived(e,r){return t=>{r(`[ERROR] child process exception %o`,t);e.push(Buffer.from(String(t.stack),"ascii"))}}function onDataReceived(e,r,t,s){return o=>{t(`%s received %L bytes`,r,o);s(`%B`,o);e.push(o)}}var sr,or;var nr=__esm({"src/lib/runners/git-executor-chain.ts"(){"use strict";sr=t(317);m();ae();K();tr();or=class{constructor(e,r,t){this._executor=e;this._scheduler=r;this._plugins=t;this._chain=Promise.resolve();this._queue=new rr}get cwd(){return this._cwd||this._executor.cwd}set cwd(e){this._cwd=e}get env(){return this._executor.env}get outputHandler(){return this._executor.outputHandler}chain(){return this}push(e){this._queue.push(e);return this._chain=this._chain.then((()=>this.attemptTask(e)))}attemptTask(e){return __async(this,null,(function*(){const r=yield this._scheduler.next();const onQueueComplete=()=>this._queue.complete(e);try{const{logger:r}=this._queue.attempt(e);return yield isEmptyTask(e)?this.attemptEmptyTask(e,r):this.attemptRemoteTask(e,r)}catch(r){throw this.onFatalException(e,r)}finally{onQueueComplete();r()}}))}onFatalException(e,r){const t=r instanceof d?Object.assign(r,{task:e}):new d(e,r&&String(r));this._chain=Promise.resolve();this._queue.fatal(t);return t}attemptRemoteTask(e,r){return __async(this,null,(function*(){const t=this._plugins.exec("spawn.binary","",pluginContext(e,e.commands));const s=this._plugins.exec("spawn.args",[...e.commands],pluginContext(e,e.commands));const o=yield this.gitResponse(e,t,s,this.outputHandler,r.step("SPAWN"));const n=yield this.handleTaskData(e,s,o,r.step("HANDLE"));r(`passing response to task's parser as a %s`,e.format);if(isBufferTask(e)){return callTaskParser(e.parser,n)}return callTaskParser(e.parser,n.asStrings())}))}attemptEmptyTask(e,r){return __async(this,null,(function*(){r(`empty task bypassing child process to call to task's parser`);return e.parser(this)}))}handleTaskData(e,r,t,s){const{exitCode:o,rejection:n,stdOut:i,stdErr:a}=t;return new Promise(((c,u)=>{s(`Preparing to handle process response exitCode=%d stdOut=`,o);const{error:l}=this._plugins.exec("task.error",{error:n},__spreadValues(__spreadValues({},pluginContext(e,r)),t));if(l&&e.onError){s.info(`exitCode=%s handling with custom error handler`);return e.onError(t,l,(e=>{s.info(`custom error handler treated as success`);s(`custom error returned a %s`,P(e));c(new I(Array.isArray(e)?Buffer.concat(e):e,Buffer.concat(a)))}),u)}if(l){s.info(`handling as error: exitCode=%s stdErr=%s rejection=%o`,o,a.length,n);return u(l)}s.info(`retrieving task output complete`);c(new I(Buffer.concat(i),Buffer.concat(a)))}))}gitResponse(e,r,t,s,o){return __async(this,null,(function*(){const n=o.sibling("output");const i=this._plugins.exec("spawn.options",{cwd:this.cwd,env:this.env,windowsHide:true},pluginContext(e,e.commands));return new Promise((a=>{const c=[];const u=[];o.info(`%s %o`,r,t);o("%O",i);let l=this._beforeSpawn(e,t);if(l){return a({stdOut:c,stdErr:u,exitCode:9901,rejection:l})}this._plugins.exec("spawn.before",void 0,__spreadProps(__spreadValues({},pluginContext(e,t)),{kill(e){l=e||l}}));const p=(0,sr.spawn)(r,t,i);p.stdout.on("data",onDataReceived(c,"stdOut",o,n.step("stdOut")));p.stderr.on("data",onDataReceived(u,"stdErr",o,n.step("stdErr")));p.on("error",onErrorReceived(u,o));if(s){o(`Passing child process stdOut/stdErr to custom outputHandler`);s(r,p.stdout,p.stderr,[...t])}this._plugins.exec("spawn.after",void 0,__spreadProps(__spreadValues({},pluginContext(e,t)),{spawned:p,close(e,r){a({stdOut:c,stdErr:u,exitCode:e,rejection:l||r})},kill(e){if(p.killed){return}l=e;p.kill("SIGINT")}}))}))}))}_beforeSpawn(e,r){let t;this._plugins.exec("spawn.before",void 0,__spreadProps(__spreadValues({},pluginContext(e,r)),{kill(e){t=e||t}}));return t}}}});var ir={};__export(ir,{GitExecutor:()=>ar});var ar;var cr=__esm({"src/lib/runners/git-executor.ts"(){"use strict";nr();ar=class{constructor(e,r,t){this.cwd=e;this._scheduler=r;this._plugins=t;this._chain=new or(this,this._scheduler,this._plugins)}chain(){return new or(this,this._scheduler,this._plugins)}push(e){return this._chain.push(e)}}}});function taskCallback(e,r,t=C){const onSuccess=e=>{t(null,e)};const onError2=r=>{if((r==null?void 0:r.task)===e){t(r instanceof f?addDeprecationNoticeToError(r):r,void 0)}};r.then(onSuccess,onError2)}function addDeprecationNoticeToError(e){let log=e=>{console.warn(`simple-git deprecation notice: accessing GitResponseError.${e} should be GitResponseError.git.${e}, this will no longer be available in version 3`);log=C};return Object.create(e,Object.getOwnPropertyNames(e.git).reduce(descriptorReducer,{}));function descriptorReducer(r,t){if(t in e){return r}r[t]={enumerable:false,configurable:false,get(){log(t);return e.git[t]}};return r}}var ur=__esm({"src/lib/task-callback.ts"(){"use strict";h();K()}});function changeWorkingDirectoryTask(e,r){return adhocExecTask((t=>{if(!folderExists(e)){throw new Error(`Git.cwd: cannot change to non-directory "${e}"`)}return(r||t).cwd=e}))}var lr=__esm({"src/lib/tasks/change-working-directory.ts"(){"use strict";K();ae()}});function checkoutTask(e){const r=["checkout",...e];if(r[1]==="-b"&&r.includes("-B")){r[1]=remove(r,"-B")}return straightThroughStringTask(r)}function checkout_default(){return{checkout(){return this._runTask(checkoutTask(getTrailingOptions(arguments,1)),trailingFunctionArgument(arguments))},checkoutBranch(e,r){return this._runTask(checkoutTask(["-b",e,r,...getTrailingOptions(arguments)]),trailingFunctionArgument(arguments))},checkoutLocalBranch(e){return this._runTask(checkoutTask(["-b",e,...getTrailingOptions(arguments)]),trailingFunctionArgument(arguments))}}}var pr=__esm({"src/lib/tasks/checkout.ts"(){"use strict";K();ae()}});function countObjectsResponse(){return{count:0,garbage:0,inPack:0,packs:0,prunePackable:0,size:0,sizeGarbage:0,sizePack:0}}function count_objects_default(){return{countObjects(){return this._runTask({commands:["count-objects","--verbose"],format:"utf-8",parser(e){return parseStringResponse(countObjectsResponse(),[gr],e)}})}}}var gr;var dr=__esm({"src/lib/tasks/count-objects.ts"(){"use strict";K();gr=new q(/([a-z-]+): (\d+)$/,((e,[r,t])=>{const s=asCamelCase(r);if(e.hasOwnProperty(s)){e[s]=asNumber(t)}}))}});function parseCommitResult(e){const r={author:null,branch:"",commit:"",root:false,summary:{changes:0,insertions:0,deletions:0}};return parseStringResponse(r,mr,e)}var mr;var fr=__esm({"src/lib/parsers/parse-commit.ts"(){"use strict";K();mr=[new q(/^\[([^\s]+)( \([^)]+\))? ([^\]]+)/,((e,[r,t,s])=>{e.branch=r;e.commit=s;e.root=!!t})),new q(/\s*Author:\s(.+)/i,((e,[r])=>{const t=r.split("<");const s=t.pop();if(!s||!s.includes("@")){return}e.author={email:s.substr(0,s.length-1),name:t.join("<").trim()}})),new q(/(\d+)[^,]*(?:,\s*(\d+)[^,]*)(?:,\s*(\d+))/g,((e,[r,t,s])=>{e.summary.changes=parseInt(r,10)||0;e.summary.insertions=parseInt(t,10)||0;e.summary.deletions=parseInt(s,10)||0})),new q(/^(\d+)[^,]*(?:,\s*(\d+)[^(]+\(([+-]))?/,((e,[r,t,s])=>{e.summary.changes=parseInt(r,10)||0;const o=parseInt(t,10)||0;if(s==="-"){e.summary.deletions=o}else if(s==="+"){e.summary.insertions=o}}))]}});function commitTask(e,r,t){const s=["-c","core.abbrev=40","commit",...prefixedArray(e,"-m"),...r,...t];return{commands:s,format:"utf-8",parser:parseCommitResult}}function commit_default(){return{commit(e,...r){const t=trailingFunctionArgument(arguments);const s=rejectDeprecatedSignatures(e)||commitTask(asArray(e),asArray(filterType(r[0],D,[])),[...filterType(r[1],A,[]),...getTrailingOptions(arguments,0,true)]);return this._runTask(s,t)}};function rejectDeprecatedSignatures(e){return!D(e)&&configurationErrorTask(`git.commit: requires the commit message to be supplied as a string/string[]`)}}var hr=__esm({"src/lib/tasks/commit.ts"(){"use strict";fr();K();ae()}});function first_commit_default(){return{firstCommit(){return this._runTask(straightThroughStringTask(["rev-list","--max-parents=0","HEAD"],true),trailingFunctionArgument(arguments))}}}var Tr=__esm({"src/lib/tasks/first-commit.ts"(){"use strict";K();ae()}});function hashObjectTask(e,r){const t=["hash-object",e];if(r){t.push("-w")}return straightThroughStringTask(t,true)}var br=__esm({"src/lib/tasks/hash-object.ts"(){"use strict";ae()}});function parseInit(e,r,t){const s=String(t).trim();let o;if(o=wr.exec(s)){return new Er(e,r,false,o[1])}if(o=_r.exec(s)){return new Er(e,r,true,o[1])}let n="";const i=s.split(" ");while(i.length){const e=i.shift();if(e==="in"){n=i.join(" ");break}}return new Er(e,r,/^re/i.test(s),n)}var Er,wr,_r;var kr=__esm({"src/lib/responses/InitSummary.ts"(){"use strict";Er=class{constructor(e,r,t,s){this.bare=e;this.path=r;this.existing=t;this.gitDir=s}};wr=/^Init.+ repository in (.+)$/;_r=/^Rein.+ in (.+)$/}});function hasBareCommand(e){return e.includes(vr)}function initTask(e=false,r,t){const s=["init",...t];if(e&&!hasBareCommand(s)){s.splice(1,0,vr)}return{commands:s,format:"utf-8",parser(e){return parseInit(s.includes("--bare"),r,e)}}}var vr;var yr=__esm({"src/lib/tasks/init.ts"(){"use strict";kr();vr="--bare"}});function logFormatFromCommand(e){for(let r=0;r<e.length;r++){const t=Gr.exec(e[r]);if(t){return`--${t[1]}`}}return""}function isLogFormat(e){return Gr.test(e)}var Gr;var Or=__esm({"src/lib/args/log-format.ts"(){"use strict";Gr=/^--(stat|numstat|name-only|name-status)(=|$)/}});var Cr;var Pr=__esm({"src/lib/responses/DiffSummary.ts"(){"use strict";Cr=class{constructor(){this.changed=0;this.deletions=0;this.insertions=0;this.files=[]}}}});function getDiffParser(e=""){const r=Dr[e];return e=>parseStringResponse(new Cr,r,e,false)}var Fr,Ar,Sr,Rr,Dr;var Ur=__esm({"src/lib/parsers/parse-diff-summary.ts"(){"use strict";Or();Pr();_e();K();Fr=[new q(/^(.+)\s+\|\s+(\d+)(\s+[+\-]+)?$/,((e,[r,t,s=""])=>{e.files.push({file:r.trim(),changes:asNumber(t),insertions:s.replace(/[^+]/g,"").length,deletions:s.replace(/[^-]/g,"").length,binary:false})})),new q(/^(.+) \|\s+Bin ([0-9.]+) -> ([0-9.]+) ([a-z]+)/,((e,[r,t,s])=>{e.files.push({file:r.trim(),before:asNumber(t),after:asNumber(s),binary:true})})),new q(/(\d+) files? changed\s*((?:, \d+ [^,]+){0,2})/,((e,[r,t])=>{const s=/(\d+) i/.exec(t);const o=/(\d+) d/.exec(t);e.changed=asNumber(r);e.insertions=asNumber(s==null?void 0:s[1]);e.deletions=asNumber(o==null?void 0:o[1])}))];Ar=[new q(/(\d+)\t(\d+)\t(.+)$/,((e,[r,t,s])=>{const o=asNumber(r);const n=asNumber(t);e.changed++;e.insertions+=o;e.deletions+=n;e.files.push({file:s,changes:o+n,insertions:o,deletions:n,binary:false})})),new q(/-\t-\t(.+)$/,((e,[r])=>{e.changed++;e.files.push({file:r,after:0,before:0,binary:true})}))];Sr=[new q(/(.+)$/,((e,[r])=>{e.changed++;e.files.push({file:r,changes:0,insertions:0,deletions:0,binary:false})}))];Rr=[new q(/([ACDMRTUXB])([0-9]{0,3})\t(.[^\t]*)(\t(.[^\t]*))?$/,((e,[r,t,s,o,n])=>{e.changed++;e.files.push({file:n!=null?n:s,changes:0,insertions:0,deletions:0,binary:false,status:orVoid(isDiffNameStatus(r)&&r),from:orVoid(!!n&&s!==n&&s),similarity:asNumber(t)})}))];Dr={[""]:Fr,["--stat"]:Fr,["--numstat"]:Ar,["--name-status"]:Rr,["--name-only"]:Sr}}});function lineBuilder(e,r){return r.reduce(((r,t,s)=>{r[t]=e[s]||"";return r}),Object.create({diff:null}))}function createListLogSummaryParser(e=jr,r=Ir,t=""){const s=getDiffParser(t);return function(t){const o=toLinesWithContent(t.trim(),false,Lr).map((function(t){const o=t.split(xr);const n=lineBuilder(o[0].split(e),r);if(o.length>1&&!!o[1].trim()){n.diff=s(o[1])}return n}));return{all:o,latest:o.length&&o[0]||null,total:o.length}}}var Lr,xr,jr,Ir;var Mr=__esm({"src/lib/parsers/parse-list-log-summary.ts"(){"use strict";K();Ur();Or();Lr="òòòòòò ";xr=" òò";jr=" ò ";Ir=["hash","date","message","refs","author_name","author_email"]}});var qr={};__export(qr,{diffSummaryTask:()=>diffSummaryTask,validateLogFormatConfig:()=>validateLogFormatConfig});function diffSummaryTask(e){let r=logFormatFromCommand(e);const t=["diff"];if(r===""){r="--stat";t.push("--stat=4096")}t.push(...e);return validateLogFormatConfig(t)||{commands:t,format:"utf-8",parser:getDiffParser(r)}}function validateLogFormatConfig(e){const r=e.filter(isLogFormat);if(r.length>1){return configurationErrorTask(`Summary flags are mutually exclusive - pick one of ${r.join(",")}`)}if(r.length&&e.includes("-z")){return configurationErrorTask(`Summary flag ${r} parsing is not compatible with null termination option '-z'`)}}var Br=__esm({"src/lib/tasks/diff.ts"(){"use strict";Or();Ur();ae()}});function prettyFormat(e,r){const t=[];const s=[];Object.keys(e).forEach((r=>{t.push(r);s.push(String(e[r]))}));return[t,s.join(r)]}function userOptions(e){return Object.keys(e).reduce(((r,t)=>{if(!(t in Nr)){r[t]=e[t]}return r}),{})}function parseLogOptions(e={},r=[]){const t=filterType(e.splitter,S,jr);const s=!filterPrimitives(e.format)&&e.format?e.format:{hash:"%H",date:e.strictDate===false?"%ai":"%aI",message:"%s",refs:"%D",body:e.multiLine?"%B":"%b",author_name:e.mailMap!==false?"%aN":"%an",author_email:e.mailMap!==false?"%aE":"%ae"};const[o,n]=prettyFormat(s,t);const i=[];const a=[`--pretty=format:${Lr}${n}${xr}`,...r];const c=e.n||e["max-count"]||e.maxCount;if(c){a.push(`--max-count=${c}`)}if(e.from||e.to){const r=e.symmetric!==false?"...":"..";i.push(`${e.from||""}${r}${e.to||""}`)}if(S(e.file)){a.push("--follow",pathspec(e.file))}appendTaskOptions(userOptions(e),a);return{fields:o,splitter:t,commands:[...a,...i]}}function logTask(e,r,t){const s=createListLogSummaryParser(e,r,logFormatFromCommand(t));return{commands:["log",...t],format:"utf-8",parser:s}}function log_default(){return{log(...e){const r=trailingFunctionArgument(arguments);const t=parseLogOptions(trailingOptionsArgument(arguments),filterType(arguments[0],A));const s=rejectDeprecatedSignatures(...e)||validateLogFormatConfig(t.commands)||createLogTask(t);return this._runTask(s,r)}};function createLogTask(e){return logTask(e.splitter,e.fields,e.commands)}function rejectDeprecatedSignatures(e,r){return S(e)&&S(r)&&configurationErrorTask(`git.log(string, string) should be replaced with git.log({ from: string, to: string })`)}}var Nr;var $r=__esm({"src/lib/tasks/log.ts"(){"use strict";Or();b();Mr();K();ae();Br();Nr=(e=>{e[e["--pretty"]=0]="--pretty";e[e["max-count"]=1]="max-count";e[e["maxCount"]=2]="maxCount";e[e["n"]=3]="n";e[e["file"]=4]="file";e[e["format"]=5]="format";e[e["from"]=6]="from";e[e["to"]=7]="to";e[e["splitter"]=8]="splitter";e[e["symmetric"]=9]="symmetric";e[e["mailMap"]=10]="mailMap";e[e["multiLine"]=11]="multiLine";e[e["strictDate"]=12]="strictDate";return e})(Nr||{})}});var Wr,zr;var Hr=__esm({"src/lib/responses/MergeSummary.ts"(){"use strict";Wr=class{constructor(e,r=null,t){this.reason=e;this.file=r;this.meta=t}toString(){return`${this.file}:${this.reason}`}};zr=class{constructor(){this.conflicts=[];this.merges=[];this.result="success"}get failed(){return this.conflicts.length>0}get reason(){return this.result}toString(){if(this.conflicts.length){return`CONFLICTS: ${this.conflicts.join(", ")}`}return"OK"}}}});var Vr,Kr;var Jr=__esm({"src/lib/responses/PullSummary.ts"(){"use strict";Vr=class{constructor(){this.remoteMessages={all:[]};this.created=[];this.deleted=[];this.files=[];this.deletions={};this.insertions={};this.summary={changes:0,deletions:0,insertions:0}}};Kr=class{constructor(){this.remote="";this.hash={local:"",remote:""};this.branch={local:"",remote:""};this.message=""}toString(){return this.message}}}});function objectEnumerationResult(e){return e.objects=e.objects||{compressing:0,counting:0,enumerating:0,packReused:0,reused:{count:0,delta:0},total:{count:0,delta:0}}}function asObjectCount(e){const r=/^\s*(\d+)/.exec(e);const t=/delta (\d+)/i.exec(e);return{count:asNumber(r&&r[1]||"0"),delta:asNumber(t&&t[1]||"0")}}var Yr;var Qr=__esm({"src/lib/parsers/parse-remote-objects.ts"(){"use strict";K();Yr=[new B(/^remote:\s*(enumerating|counting|compressing) objects: (\d+),/i,((e,[r,t])=>{const s=r.toLowerCase();const o=objectEnumerationResult(e.remoteMessages);Object.assign(o,{[s]:asNumber(t)})})),new B(/^remote:\s*(enumerating|counting|compressing) objects: \d+% \(\d+\/(\d+)\),/i,((e,[r,t])=>{const s=r.toLowerCase();const o=objectEnumerationResult(e.remoteMessages);Object.assign(o,{[s]:asNumber(t)})})),new B(/total ([^,]+), reused ([^,]+), pack-reused (\d+)/i,((e,[r,t,s])=>{const o=objectEnumerationResult(e.remoteMessages);o.total=asObjectCount(r);o.reused=asObjectCount(t);o.packReused=asNumber(s)}))]}});function parseRemoteMessages(e,r){return parseStringResponse({remoteMessages:new Xr},Zr,r)}var Zr,Xr;var et=__esm({"src/lib/parsers/parse-remote-messages.ts"(){"use strict";K();Qr();Zr=[new B(/^remote:\s*(.+)$/,((e,[r])=>{e.remoteMessages.all.push(r.trim());return false})),...Yr,new B([/create a (?:pull|merge) request/i,/\s(https?:\/\/\S+)$/],((e,[r])=>{e.remoteMessages.pullRequestUrl=r})),new B([/found (\d+) vulnerabilities.+\(([^)]+)\)/i,/\s(https?:\/\/\S+)$/],((e,[r,t,s])=>{e.remoteMessages.vulnerabilities={count:asNumber(r),summary:t,url:s}}))];Xr=class{constructor(){this.all=[]}}}});function parsePullErrorResult(e,r){const t=parseStringResponse(new Kr,nt,[e,r]);return t.message&&t}var rt,tt,st,ot,nt,it,at;var ct=__esm({"src/lib/parsers/parse-pull.ts"(){"use strict";Jr();K();et();rt=/^\s*(.+?)\s+\|\s+\d+\s*(\+*)(-*)/;tt=/(\d+)\D+((\d+)\D+\(\+\))?(\D+(\d+)\D+\(-\))?/;st=/^(create|delete) mode \d+ (.+)/;ot=[new q(rt,((e,[r,t,s])=>{e.files.push(r);if(t){e.insertions[r]=t.length}if(s){e.deletions[r]=s.length}})),new q(tt,((e,[r,,t,,s])=>{if(t!==void 0||s!==void 0){e.summary.changes=+r||0;e.summary.insertions=+t||0;e.summary.deletions=+s||0;return true}return false})),new q(st,((e,[r,t])=>{append(e.files,t);append(r==="create"?e.created:e.deleted,t)}))];nt=[new q(/^from\s(.+)$/i,((e,[r])=>void(e.remote=r))),new q(/^fatal:\s(.+)$/,((e,[r])=>void(e.message=r))),new q(/([a-z0-9]+)\.\.([a-z0-9]+)\s+(\S+)\s+->\s+(\S+)$/,((e,[r,t,s,o])=>{e.branch.local=s;e.hash.local=r;e.branch.remote=o;e.hash.remote=t}))];it=(e,r)=>parseStringResponse(new Vr,ot,[e,r]);at=(e,r)=>Object.assign(new Vr,it(e,r),parseRemoteMessages(e,r))}});var ut,lt,pt;var gt=__esm({"src/lib/parsers/parse-merge.ts"(){"use strict";Hr();K();ct();ut=[new q(/^Auto-merging\s+(.+)$/,((e,[r])=>{e.merges.push(r)})),new q(/^CONFLICT\s+\((.+)\): Merge conflict in (.+)$/,((e,[r,t])=>{e.conflicts.push(new Wr(r,t))})),new q(/^CONFLICT\s+\((.+\/delete)\): (.+) deleted in (.+) and/,((e,[r,t,s])=>{e.conflicts.push(new Wr(r,t,{deleteRef:s}))})),new q(/^CONFLICT\s+\((.+)\):/,((e,[r])=>{e.conflicts.push(new Wr(r,null))})),new q(/^Automatic merge failed;\s+(.+)$/,((e,[r])=>{e.result=r}))];lt=(e,r)=>Object.assign(pt(e,r),at(e,r));pt=e=>parseStringResponse(new zr,ut,e)}});function mergeTask(e){if(!e.length){return configurationErrorTask("Git.merge requires at least one option")}return{commands:["merge",...e],format:"utf-8",parser(e,r){const t=lt(e,r);if(t.failed){throw new f(t)}return t}}}var dt=__esm({"src/lib/tasks/merge.ts"(){"use strict";h();gt();ae()}});function pushResultPushedItem(e,r,t){const s=t.includes("deleted");const o=t.includes("tag")||/^refs\/tags/.test(e);const n=!t.includes("new");return{deleted:s,tag:o,branch:!o,new:!n,alreadyUpdated:n,local:e,remote:r}}var mt,ft,ht;var Tt=__esm({"src/lib/parsers/parse-push.ts"(){"use strict";K();et();mt=[new q(/^Pushing to (.+)$/,((e,[r])=>{e.repo=r})),new q(/^updating local tracking ref '(.+)'/,((e,[r])=>{e.ref=__spreadProps(__spreadValues({},e.ref||{}),{local:r})})),new q(/^[=*-]\s+([^:]+):(\S+)\s+\[(.+)]$/,((e,[r,t,s])=>{e.pushed.push(pushResultPushedItem(r,t,s))})),new q(/^Branch '([^']+)' set up to track remote branch '([^']+)' from '([^']+)'/,((e,[r,t,s])=>{e.branch=__spreadProps(__spreadValues({},e.branch||{}),{local:r,remote:t,remoteName:s})})),new q(/^([^:]+):(\S+)\s+([a-z0-9]+)\.\.([a-z0-9]+)$/,((e,[r,t,s,o])=>{e.update={head:{local:r,remote:t},hash:{from:s,to:o}}}))];ft=(e,r)=>{const t=ht(e,r);const s=parseRemoteMessages(e,r);return __spreadValues(__spreadValues({},t),s)};ht=(e,r)=>parseStringResponse({pushed:[]},mt,[e,r])}});var bt={};__export(bt,{pushTagsTask:()=>pushTagsTask,pushTask:()=>pushTask});function pushTagsTask(e={},r){append(r,"--tags");return pushTask(e,r)}function pushTask(e={},r){const t=["push",...r];if(e.branch){t.splice(1,0,e.branch)}if(e.remote){t.splice(1,0,e.remote)}remove(t,"-v");append(t,"--verbose");append(t,"--porcelain");return{commands:t,format:"utf-8",parser:ft}}var Et=__esm({"src/lib/tasks/push.ts"(){"use strict";Tt();K()}});function show_default(){return{showBuffer(){const e=["show",...getTrailingOptions(arguments,1)];if(!e.includes("--binary")){e.splice(1,0,"--binary")}return this._runTask(straightThroughBufferTask(e),trailingFunctionArgument(arguments))},show(){const e=["show",...getTrailingOptions(arguments,1)];return this._runTask(straightThroughStringTask(e),trailingFunctionArgument(arguments))}}}var wt=__esm({"src/lib/tasks/show.ts"(){"use strict";K();ae()}});var _t,kt;var vt=__esm({"src/lib/responses/FileStatusSummary.ts"(){"use strict";_t=/^(.+)\0(.+)$/;kt=class{constructor(e,r,t){this.path=e;this.index=r;this.working_dir=t;if(r==="R"||t==="R"){const r=_t.exec(e)||[null,e,e];this.from=r[2]||"";this.path=r[1]||""}}}}});function renamedFile(e){const[r,t]=e.split(O);return{from:t||r,to:r}}function parser3(e,r,t){return[`${e}${r}`,t]}function conflicts(e,...r){return r.map((r=>parser3(e,r,((e,r)=>append(e.conflicted,r)))))}function splitLine(e,r){const t=r.trim();switch(" "){case t.charAt(2):return data(t.charAt(0),t.charAt(1),t.substr(3));case t.charAt(1):return data(" ",t.charAt(0),t.substr(2));default:return}function data(r,t,s){const o=`${r}${t}`;const n=Gt.get(o);if(n){n(e,s)}if(o!=="##"&&o!=="!!"){e.files.push(new kt(s,r,t))}}}var yt,Gt,Ot;var Ct=__esm({"src/lib/responses/StatusSummary.ts"(){"use strict";K();vt();yt=class{constructor(){this.not_added=[];this.conflicted=[];this.created=[];this.deleted=[];this.ignored=void 0;this.modified=[];this.renamed=[];this.files=[];this.staged=[];this.ahead=0;this.behind=0;this.current=null;this.tracking=null;this.detached=false;this.isClean=()=>!this.files.length}};Gt=new Map([parser3(" ","A",((e,r)=>append(e.created,r))),parser3(" ","D",((e,r)=>append(e.deleted,r))),parser3(" ","M",((e,r)=>append(e.modified,r))),parser3("A"," ",((e,r)=>append(e.created,r)&&append(e.staged,r))),parser3("A","M",((e,r)=>append(e.created,r)&&append(e.staged,r)&&append(e.modified,r))),parser3("D"," ",((e,r)=>append(e.deleted,r)&&append(e.staged,r))),parser3("M"," ",((e,r)=>append(e.modified,r)&&append(e.staged,r))),parser3("M","M",((e,r)=>append(e.modified,r)&&append(e.staged,r))),parser3("R"," ",((e,r)=>{append(e.renamed,renamedFile(r))})),parser3("R","M",((e,r)=>{const t=renamedFile(r);append(e.renamed,t);append(e.modified,t.to)})),parser3("!","!",((e,r)=>{append(e.ignored=e.ignored||[],r)})),parser3("?","?",((e,r)=>append(e.not_added,r))),...conflicts("A","A","U"),...conflicts("D","D","U"),...conflicts("U","A","D","U"),["##",(e,r)=>{const t=/ahead (\d+)/;const s=/behind (\d+)/;const o=/^(.+?(?=(?:\.{3}|\s|$)))/;const n=/\.{3}(\S*)/;const i=/\son\s([\S]+)$/;let a;a=t.exec(r);e.ahead=a&&+a[1]||0;a=s.exec(r);e.behind=a&&+a[1]||0;a=o.exec(r);e.current=a&&a[1];a=n.exec(r);e.tracking=a&&a[1];a=i.exec(r);e.current=a&&a[1]||e.current;e.detached=/\(no branch\)/.test(r)}]]);Ot=function(e){const r=e.split(O);const t=new yt;for(let e=0,s=r.length;e<s;){let s=r[e++].trim();if(!s){continue}if(s.charAt(0)==="R"){s+=O+(r[e++]||"")}splitLine(t,s)}return t}}});function statusTask(e){const r=["status","--porcelain","-b","-u","--null",...e.filter((e=>!Pt.includes(e)))];return{format:"utf-8",commands:r,parser(e){return Ot(e)}}}var Pt;var Ft=__esm({"src/lib/tasks/status.ts"(){"use strict";Ct();Pt=["--null","-z"]}});function versionResponse(e=0,r=0,t=0,s="",o=true){return Object.defineProperty({major:e,minor:r,patch:t,agent:s,installed:o},"toString",{value(){return`${this.major}.${this.minor}.${this.patch}`},configurable:false,enumerable:false})}function notInstalledResponse(){return versionResponse(0,0,0,"",false)}function version_default(){return{version(){return this._runTask({commands:["--version"],format:"utf-8",parser:versionParser,onError(e,r,t,s){if(e.exitCode===-2){return t(Buffer.from(At))}s(r)}})}}}function versionParser(e){if(e===At){return notInstalledResponse()}return parseStringResponse(versionResponse(0,0,0,e),St,e)}var At,St;var Rt=__esm({"src/lib/tasks/version.ts"(){"use strict";K();At="installed=false";St=[new q(/version (\d+)\.(\d+)\.(\d+)(?:\s*\((.+)\))?/,((e,[r,t,s,o=""])=>{Object.assign(e,versionResponse(asNumber(r),asNumber(t),asNumber(s),o))})),new q(/version (\d+)\.(\d+)\.(\D+)(.+)?$/,((e,[r,t,s,o=""])=>{Object.assign(e,versionResponse(asNumber(r),asNumber(t),s,o))}))]}});var Dt={};__export(Dt,{SimpleGitApi:()=>Ut});var Ut;var Lt=__esm({"src/lib/simple-git-api.ts"(){"use strict";ur();lr();pr();dr();hr();be();Tr();Oe();br();yr();$r();dt();Et();wt();Ft();ae();Rt();K();Ut=class{constructor(e){this._executor=e}_runTask(e,r){const t=this._executor.chain();const s=t.push(e);if(r){taskCallback(e,s,r)}return Object.create(this,{then:{value:s.then.bind(s)},catch:{value:s.catch.bind(s)},_executor:{value:t}})}add(e){return this._runTask(straightThroughStringTask(["add",...asArray(e)]),trailingFunctionArgument(arguments))}cwd(e){const r=trailingFunctionArgument(arguments);if(typeof e==="string"){return this._runTask(changeWorkingDirectoryTask(e,this._executor),r)}if(typeof(e==null?void 0:e.path)==="string"){return this._runTask(changeWorkingDirectoryTask(e.path,e.root&&this._executor||void 0),r)}return this._runTask(configurationErrorTask("Git.cwd: workingDirectory must be supplied as a string"),r)}hashObject(e,r){return this._runTask(hashObjectTask(e,r===true),trailingFunctionArgument(arguments))}init(e){return this._runTask(initTask(e===true,this._executor.cwd,getTrailingOptions(arguments)),trailingFunctionArgument(arguments))}merge(){return this._runTask(mergeTask(getTrailingOptions(arguments)),trailingFunctionArgument(arguments))}mergeFromTo(e,r){if(!(S(e)&&S(r))){return this._runTask(configurationErrorTask(`Git.mergeFromTo requires that the 'remote' and 'branch' arguments are supplied as strings`))}return this._runTask(mergeTask([e,r,...getTrailingOptions(arguments)]),trailingFunctionArgument(arguments,false))}outputHandler(e){this._executor.outputHandler=e;return this}push(){const e=pushTask({remote:filterType(arguments[0],S),branch:filterType(arguments[1],S)},getTrailingOptions(arguments));return this._runTask(e,trailingFunctionArgument(arguments))}stash(){return this._runTask(straightThroughStringTask(["stash",...getTrailingOptions(arguments)]),trailingFunctionArgument(arguments))}status(){return this._runTask(statusTask(getTrailingOptions(arguments)),trailingFunctionArgument(arguments))}};Object.assign(Ut.prototype,checkout_default(),commit_default(),config_default(),count_objects_default(),first_commit_default(),grep_default(),log_default(),show_default(),version_default())}});var xt={};__export(xt,{Scheduler:()=>Mt});var jt,It,Mt;var qt=__esm({"src/lib/runners/scheduler.ts"(){"use strict";K();jt=t(997);Xe();It=(()=>{let e=0;return()=>{e++;const{promise:r,done:t}=(0,jt.createDeferred)();return{promise:r,done:t,id:e}}})();Mt=class{constructor(e=2){this.concurrency=e;this.logger=createLogger("","scheduler");this.pending=[];this.running=[];this.logger(`Constructed, concurrency=%s`,e)}schedule(){if(!this.pending.length||this.running.length>=this.concurrency){this.logger(`Schedule attempt ignored, pending=%s running=%s concurrency=%s`,this.pending.length,this.running.length,this.concurrency);return}const e=append(this.running,this.pending.shift());this.logger(`Attempting id=%s`,e.id);e.done((()=>{this.logger(`Completing id=`,e.id);remove(this.running,e);this.schedule()}))}next(){const{promise:e,id:r}=append(this.pending,It());this.logger(`Scheduling id=%s`,r);this.schedule();return e}}}});var Bt={};__export(Bt,{applyPatchTask:()=>applyPatchTask});function applyPatchTask(e,r){return straightThroughStringTask(["apply",...r,...e])}var Nt=__esm({"src/lib/tasks/apply-patch.ts"(){"use strict";ae()}});function branchDeletionSuccess(e,r){return{branch:e,hash:r,success:true}}function branchDeletionFailure(e){return{branch:e,hash:null,success:false}}var $t;var Wt=__esm({"src/lib/responses/BranchDeleteSummary.ts"(){"use strict";$t=class{constructor(){this.all=[];this.branches={};this.errors=[]}get success(){return!this.errors.length}}}});function hasBranchDeletionError(e,r){return r===1&&Ht.test(e)}var zt,Ht,Vt,Kt;var Jt=__esm({"src/lib/parsers/parse-branch-delete.ts"(){"use strict";Wt();K();zt=/(\S+)\s+\(\S+\s([^)]+)\)/;Ht=/^error[^']+'([^']+)'/m;Vt=[new q(zt,((e,[r,t])=>{const s=branchDeletionSuccess(r,t);e.all.push(s);e.branches[r]=s})),new q(Ht,((e,[r])=>{const t=branchDeletionFailure(r);e.errors.push(t);e.all.push(t);e.branches[r]=t}))];Kt=(e,r)=>parseStringResponse(new $t,Vt,[e,r])}});var Yt;var Qt=__esm({"src/lib/responses/BranchSummary.ts"(){"use strict";Yt=class{constructor(){this.all=[];this.branches={};this.current="";this.detached=false}push(e,r,t,s,o){if(e==="*"){this.detached=r;this.current=t}this.all.push(t);this.branches[t]={current:e==="*",linkedWorkTree:e==="+",name:t,commit:s,label:o}}}}});function branchStatus(e){return e?e.charAt(0):""}function parseBranchSummary(e){return parseStringResponse(new Yt,Zt,e)}var Zt;var Xt=__esm({"src/lib/parsers/parse-branch.ts"(){"use strict";Qt();K();Zt=[new q(/^([*+]\s)?\((?:HEAD )?detached (?:from|at) (\S+)\)\s+([a-z0-9]+)\s(.*)$/,((e,[r,t,s,o])=>{e.push(branchStatus(r),true,t,s,o)})),new q(new RegExp("^([*+]\\s)?(\\S+)\\s+([a-z0-9]+)\\s?(.*)$","s"),((e,[r,t,s,o])=>{e.push(branchStatus(r),false,t,s,o)}))]}});var es={};__export(es,{branchLocalTask:()=>branchLocalTask,branchTask:()=>branchTask,containsDeleteBranchCommand:()=>containsDeleteBranchCommand,deleteBranchTask:()=>deleteBranchTask,deleteBranchesTask:()=>deleteBranchesTask});function containsDeleteBranchCommand(e){const r=["-d","-D","--delete"];return e.some((e=>r.includes(e)))}function branchTask(e){const r=containsDeleteBranchCommand(e);const t=["branch",...e];if(t.length===1){t.push("-a")}if(!t.includes("-v")){t.splice(1,0,"-v")}return{format:"utf-8",commands:t,parser(e,t){if(r){return Kt(e,t).all[0]}return parseBranchSummary(e)}}}function branchLocalTask(){const e=parseBranchSummary;return{format:"utf-8",commands:["branch","-v"],parser:e}}function deleteBranchesTask(e,r=false){return{format:"utf-8",commands:["branch","-v",r?"-D":"-d",...e],parser(e,r){return Kt(e,r)},onError({exitCode:e,stdOut:r},t,s,o){if(!hasBranchDeletionError(String(t),e)){return o(t)}s(r)}}}function deleteBranchTask(e,r=false){const t={format:"utf-8",commands:["branch","-v",r?"-D":"-d",e],parser(r,t){return Kt(r,t).branches[e]},onError({exitCode:e,stdErr:r,stdOut:s},o,n,i){if(!hasBranchDeletionError(String(o),e)){return i(o)}throw new f(t.parser(bufferToString(s),bufferToString(r)),String(o))}};return t}var rs=__esm({"src/lib/tasks/branch.ts"(){"use strict";h();Jt();Xt();K()}});var ts;var ss=__esm({"src/lib/responses/CheckIgnore.ts"(){"use strict";ts=e=>e.split(/\n/g).map((e=>e.trim())).filter((e=>!!e))}});var os={};__export(os,{checkIgnoreTask:()=>checkIgnoreTask});function checkIgnoreTask(e){return{commands:["check-ignore",...e],format:"utf-8",parser:ts}}var ns=__esm({"src/lib/tasks/check-ignore.ts"(){"use strict";ss()}});var is={};__export(is,{cloneMirrorTask:()=>cloneMirrorTask,cloneTask:()=>cloneTask});function disallowedCommand(e){return/^--upload-pack(=|$)/.test(e)}function cloneTask(e,r,t){const s=["clone",...t];S(e)&&s.push(e);S(r)&&s.push(r);const o=s.find(disallowedCommand);if(o){return configurationErrorTask(`git.fetch: potential exploit argument blocked.`)}return straightThroughStringTask(s)}function cloneMirrorTask(e,r,t){append(t,"--mirror");return cloneTask(e,r,t)}var as=__esm({"src/lib/tasks/clone.ts"(){"use strict";ae();K()}});function parseFetchResult(e,r){const t={raw:e,remote:null,branches:[],tags:[],updated:[],deleted:[]};return parseStringResponse(t,cs,[e,r])}var cs;var us=__esm({"src/lib/parsers/parse-fetch.ts"(){"use strict";K();cs=[new q(/From (.+)$/,((e,[r])=>{e.remote=r})),new q(/\* \[new branch]\s+(\S+)\s*-> (.+)$/,((e,[r,t])=>{e.branches.push({name:r,tracking:t})})),new q(/\* \[new tag]\s+(\S+)\s*-> (.+)$/,((e,[r,t])=>{e.tags.push({name:r,tracking:t})})),new q(/- \[deleted]\s+\S+\s*-> (.+)$/,((e,[r])=>{e.deleted.push({tracking:r})})),new q(/\s*([^.]+)\.\.(\S+)\s+(\S+)\s*-> (.+)$/,((e,[r,t,s,o])=>{e.updated.push({name:s,tracking:o,to:t,from:r})}))]}});var ls={};__export(ls,{fetchTask:()=>fetchTask});function disallowedCommand2(e){return/^--upload-pack(=|$)/.test(e)}function fetchTask(e,r,t){const s=["fetch",...t];if(e&&r){s.push(e,r)}const o=s.find(disallowedCommand2);if(o){return configurationErrorTask(`git.fetch: potential exploit argument blocked.`)}return{commands:s,format:"utf-8",parser:parseFetchResult}}var ps=__esm({"src/lib/tasks/fetch.ts"(){"use strict";us();ae()}});function parseMoveResult(e){return parseStringResponse({moves:[]},gs,e)}var gs;var ds=__esm({"src/lib/parsers/parse-move.ts"(){"use strict";K();gs=[new q(/^Renaming (.+) to (.+)$/,((e,[r,t])=>{e.moves.push({from:r,to:t})}))]}});var ms={};__export(ms,{moveTask:()=>moveTask});function moveTask(e,r){return{commands:["mv","-v",...asArray(e),r],format:"utf-8",parser:parseMoveResult}}var fs=__esm({"src/lib/tasks/move.ts"(){"use strict";ds();K()}});var hs={};__export(hs,{pullTask:()=>pullTask});function pullTask(e,r,t){const s=["pull",...t];if(e&&r){s.splice(1,0,e,r)}return{commands:s,format:"utf-8",parser(e,r){return at(e,r)},onError(e,r,t,s){const o=parsePullErrorResult(bufferToString(e.stdOut),bufferToString(e.stdErr));if(o){return s(new f(o))}s(r)}}}var Ts=__esm({"src/lib/tasks/pull.ts"(){"use strict";h();ct();K()}});function parseGetRemotes(e){const r={};forEach(e,(([e])=>r[e]={name:e}));return Object.values(r)}function parseGetRemotesVerbose(e){const r={};forEach(e,(([e,t,s])=>{if(!r.hasOwnProperty(e)){r[e]={name:e,refs:{fetch:"",push:""}}}if(s&&t){r[e].refs[s.replace(/[^a-z]/g,"")]=t}}));return Object.values(r)}function forEach(e,r){forEachLineWithContent(e,(e=>r(e.split(/\s+/))))}var bs=__esm({"src/lib/responses/GetRemoteSummary.ts"(){"use strict";K()}});var Es={};__export(Es,{addRemoteTask:()=>addRemoteTask,getRemotesTask:()=>getRemotesTask,listRemotesTask:()=>listRemotesTask,remoteTask:()=>remoteTask,removeRemoteTask:()=>removeRemoteTask});function addRemoteTask(e,r,t){return straightThroughStringTask(["remote","add",...t,e,r])}function getRemotesTask(e){const r=["remote"];if(e){r.push("-v")}return{commands:r,format:"utf-8",parser:e?parseGetRemotesVerbose:parseGetRemotes}}function listRemotesTask(e){const r=[...e];if(r[0]!=="ls-remote"){r.unshift("ls-remote")}return straightThroughStringTask(r)}function remoteTask(e){const r=[...e];if(r[0]!=="remote"){r.unshift("remote")}return straightThroughStringTask(r)}function removeRemoteTask(e){return straightThroughStringTask(["remote","remove",e])}var ws=__esm({"src/lib/tasks/remote.ts"(){"use strict";bs();ae()}});var _s={};__export(_s,{stashListTask:()=>stashListTask});function stashListTask(e={},r){const t=parseLogOptions(e);const s=["stash","list",...t.commands,...r];const o=createListLogSummaryParser(t.splitter,t.fields,logFormatFromCommand(s));return validateLogFormatConfig(s)||{commands:s,format:"utf-8",parser:o}}var ks=__esm({"src/lib/tasks/stash-list.ts"(){"use strict";Or();Mr();Br();$r()}});var vs={};__export(vs,{addSubModuleTask:()=>addSubModuleTask,initSubModuleTask:()=>initSubModuleTask,subModuleTask:()=>subModuleTask,updateSubModuleTask:()=>updateSubModuleTask});function addSubModuleTask(e,r){return subModuleTask(["add",e,r])}function initSubModuleTask(e){return subModuleTask(["init",...e])}function subModuleTask(e){const r=[...e];if(r[0]!=="submodule"){r.unshift("submodule")}return straightThroughStringTask(r)}function updateSubModuleTask(e){return subModuleTask(["update",...e])}var ys=__esm({"src/lib/tasks/sub-module.ts"(){"use strict";ae()}});function singleSorted(e,r){const t=isNaN(e);const s=isNaN(r);if(t!==s){return t?1:-1}return t?sorted(e,r):0}function sorted(e,r){return e===r?0:e>r?1:-1}function trimmed(e){return e.trim()}function toNumber(e){if(typeof e==="string"){return parseInt(e.replace(/^\D+/g,""),10)||0}return 0}var Gs,Os;var Cs=__esm({"src/lib/responses/TagList.ts"(){"use strict";Gs=class{constructor(e,r){this.all=e;this.latest=r}};Os=function(e,r=false){const t=e.split("\n").map(trimmed).filter(Boolean);if(!r){t.sort((function(e,r){const t=e.split(".");const s=r.split(".");if(t.length===1||s.length===1){return singleSorted(toNumber(t[0]),toNumber(s[0]))}for(let e=0,r=Math.max(t.length,s.length);e<r;e++){const r=sorted(toNumber(t[e]),toNumber(s[e]));if(r){return r}}return 0}))}const s=r?t[0]:[...t].reverse().find((e=>e.indexOf(".")>=0));return new Gs(t,s)}}});var Ps={};__export(Ps,{addAnnotatedTagTask:()=>addAnnotatedTagTask,addTagTask:()=>addTagTask,tagListTask:()=>tagListTask});function tagListTask(e=[]){const r=e.some((e=>/^--sort=/.test(e)));return{format:"utf-8",commands:["tag","-l",...e],parser(e){return Os(e,r)}}}function addTagTask(e){return{format:"utf-8",commands:["tag",e],parser(){return{name:e}}}}function addAnnotatedTagTask(e,r){return{format:"utf-8",commands:["tag","-a","-m",r,e],parser(){return{name:e}}}}var Fs=__esm({"src/lib/tasks/tag.ts"(){"use strict";Cs()}});var As=__commonJS({"src/git.js"(e,r){"use strict";var{GitExecutor:t}=(cr(),__toCommonJS(ir));var{SimpleGitApi:s}=(Lt(),__toCommonJS(Dt));var{Scheduler:o}=(qt(),__toCommonJS(xt));var{configurationErrorTask:n}=(ae(),__toCommonJS(ne));var{asArray:i,filterArray:a,filterPrimitives:c,filterString:u,filterStringOrStringArray:l,filterType:p,getTrailingOptions:g,trailingFunctionArgument:d,trailingOptionsArgument:m}=(K(),__toCommonJS(V));var{applyPatchTask:f}=(Nt(),__toCommonJS(Bt));var{branchTask:h,branchLocalTask:T,deleteBranchesTask:b,deleteBranchTask:E}=(rs(),__toCommonJS(es));var{checkIgnoreTask:w}=(ns(),__toCommonJS(os));var{checkIsRepoTask:_}=(X(),__toCommonJS(J));var{cloneTask:k,cloneMirrorTask:v}=(as(),__toCommonJS(is));var{cleanWithOptionsTask:y,isCleanOptionsArray:G}=(me(),__toCommonJS(ce));var{diffSummaryTask:O}=(Br(),__toCommonJS(qr));var{fetchTask:C}=(ps(),__toCommonJS(ls));var{moveTask:P}=(fs(),__toCommonJS(ms));var{pullTask:F}=(Ts(),__toCommonJS(hs));var{pushTagsTask:A}=(Et(),__toCommonJS(bt));var{addRemoteTask:S,getRemotesTask:R,listRemotesTask:D,remoteTask:U,removeRemoteTask:L}=(ws(),__toCommonJS(Es));var{getResetMode:x,resetTask:j}=(Ae(),__toCommonJS(Ce));var{stashListTask:I}=(ks(),__toCommonJS(_s));var{addSubModuleTask:M,initSubModuleTask:q,subModuleTask:B,updateSubModuleTask:N}=(ys(),__toCommonJS(vs));var{addAnnotatedTagTask:$,addTagTask:W,tagListTask:z}=(Fs(),__toCommonJS(Ps));var{straightThroughBufferTask:H,straightThroughStringTask:Y}=(ae(),__toCommonJS(ne));function Git2(e,r){this._plugins=r;this._executor=new t(e.baseDir,new o(e.maxConcurrentProcesses),r);this._trimmed=e.trimmed}(Git2.prototype=Object.create(s.prototype)).constructor=Git2;Git2.prototype.customBinary=function(e){this._plugins.reconfigure("binary",e);return this};Git2.prototype.env=function(e,r){if(arguments.length===1&&typeof e==="object"){this._executor.env=e}else{(this._executor.env=this._executor.env||{})[e]=r}return this};Git2.prototype.stashList=function(e){return this._runTask(I(m(arguments)||{},a(e)&&e||[]),d(arguments))};function createCloneTask(e,r,t,s){if(typeof t!=="string"){return n(`git.${e}() requires a string 'repoPath'`)}return r(t,p(s,u),g(arguments))}Git2.prototype.clone=function(){return this._runTask(createCloneTask("clone",k,...arguments),d(arguments))};Git2.prototype.mirror=function(){return this._runTask(createCloneTask("mirror",v,...arguments),d(arguments))};Git2.prototype.mv=function(e,r){return this._runTask(P(e,r),d(arguments))};Git2.prototype.checkoutLatestTag=function(e){var r=this;return this.pull((function(){r.tags((function(t,s){r.checkout(s.latest,e)}))}))};Git2.prototype.pull=function(e,r,t,s){return this._runTask(F(p(e,u),p(r,u),g(arguments)),d(arguments))};Git2.prototype.fetch=function(e,r){return this._runTask(C(p(e,u),p(r,u),g(arguments)),d(arguments))};Git2.prototype.silent=function(e){console.warn("simple-git deprecation notice: git.silent: logging should be configured using the `debug` library / `DEBUG` environment variable, this will be an error in version 3");return this};Git2.prototype.tags=function(e,r){return this._runTask(z(g(arguments)),d(arguments))};Git2.prototype.rebase=function(){return this._runTask(Y(["rebase",...g(arguments)]),d(arguments))};Git2.prototype.reset=function(e){return this._runTask(j(x(e),g(arguments)),d(arguments))};Git2.prototype.revert=function(e){const r=d(arguments);if(typeof e!=="string"){return this._runTask(n("Commit must be a string"),r)}return this._runTask(Y(["revert",...g(arguments,0,true),e]),r)};Git2.prototype.addTag=function(e){const r=typeof e==="string"?W(e):n("Git.addTag requires a tag name");return this._runTask(r,d(arguments))};Git2.prototype.addAnnotatedTag=function(e,r){return this._runTask($(e,r),d(arguments))};Git2.prototype.deleteLocalBranch=function(e,r,t){return this._runTask(E(e,typeof r==="boolean"?r:false),d(arguments))};Git2.prototype.deleteLocalBranches=function(e,r,t){return this._runTask(b(e,typeof r==="boolean"?r:false),d(arguments))};Git2.prototype.branch=function(e,r){return this._runTask(h(g(arguments)),d(arguments))};Git2.prototype.branchLocal=function(e){return this._runTask(T(),d(arguments))};Git2.prototype.raw=function(e){const r=!Array.isArray(e);const t=[].slice.call(r?arguments:e,0);for(let e=0;e<t.length&&r;e++){if(!c(t[e])){t.splice(e,t.length-e);break}}t.push(...g(arguments,0,true));var s=d(arguments);if(!t.length){return this._runTask(n("Raw: must supply one or more command to execute"),s)}return this._runTask(Y(t,this._trimmed),s)};Git2.prototype.submoduleAdd=function(e,r,t){return this._runTask(M(e,r),d(arguments))};Git2.prototype.submoduleUpdate=function(e,r){return this._runTask(N(g(arguments,true)),d(arguments))};Git2.prototype.submoduleInit=function(e,r){return this._runTask(q(g(arguments,true)),d(arguments))};Git2.prototype.subModule=function(e,r){return this._runTask(B(g(arguments)),d(arguments))};Git2.prototype.listRemote=function(){return this._runTask(D(g(arguments)),d(arguments))};Git2.prototype.addRemote=function(e,r,t){return this._runTask(S(e,r,g(arguments)),d(arguments))};Git2.prototype.removeRemote=function(e,r){return this._runTask(L(e),d(arguments))};Git2.prototype.getRemotes=function(e,r){return this._runTask(R(e===true),d(arguments))};Git2.prototype.remote=function(e,r){return this._runTask(U(g(arguments)),d(arguments))};Git2.prototype.tag=function(e,r){const t=g(arguments);if(t[0]!=="tag"){t.unshift("tag")}return this._runTask(Y(t),d(arguments))};Git2.prototype.updateServerInfo=function(e){return this._runTask(Y(["update-server-info"]),d(arguments))};Git2.prototype.pushTags=function(e,r){const t=A({remote:p(e,u)},g(arguments));return this._runTask(t,d(arguments))};Git2.prototype.rm=function(e){return this._runTask(Y(["rm","-f",...i(e)]),d(arguments))};Git2.prototype.rmKeepLocal=function(e){return this._runTask(Y(["rm","--cached",...i(e)]),d(arguments))};Git2.prototype.catFile=function(e,r){return this._catFile("utf-8",arguments)};Git2.prototype.binaryCatFile=function(){return this._catFile("buffer",arguments)};Git2.prototype._catFile=function(e,r){var t=d(r);var s=["cat-file"];var o=r[0];if(typeof o==="string"){return this._runTask(n("Git.catFile: options must be supplied as an array of strings"),t)}if(Array.isArray(o)){s.push.apply(s,o)}const i=e==="buffer"?H(s):Y(s);return this._runTask(i,t)};Git2.prototype.diff=function(e,r){const t=u(e)?n("git.diff: supplying options as a single string is no longer supported, switch to an array of strings"):Y(["diff",...g(arguments)]);return this._runTask(t,d(arguments))};Git2.prototype.diffSummary=function(){return this._runTask(O(g(arguments,1)),d(arguments))};Git2.prototype.applyPatch=function(e){const r=!l(e)?n(`git.applyPatch requires one or more string patches as the first argument`):f(i(e),g([].slice.call(arguments,1)));return this._runTask(r,d(arguments))};Git2.prototype.revparse=function(){const e=["rev-parse",...g(arguments,true)];return this._runTask(Y(e,true),d(arguments))};Git2.prototype.clean=function(e,r,t){const s=G(e);const o=s&&e.join("")||p(e,u)||"";const n=g([].slice.call(arguments,s?1:0));return this._runTask(y(o,n),d(arguments))};Git2.prototype.exec=function(e){const r={commands:[],format:"utf-8",parser(){if(typeof e==="function"){e()}}};return this._runTask(r)};Git2.prototype.clearQueue=function(){return this};Git2.prototype.checkIgnore=function(e,r){return this._runTask(w(i(p(e,l,[]))),d(arguments))};Git2.prototype.checkIsRepo=function(e,r){return this._runTask(_(p(e,u)),d(arguments))};r.exports=Git2}});var Ss={};__export(Ss,{esModuleFactory:()=>esModuleFactory,gitExportFactory:()=>gitExportFactory,gitInstanceFactory:()=>gitInstanceFactory});function esModuleFactory(e){return Object.defineProperties(e,{__esModule:{value:true},default:{value:e}})}function gitExportFactory(e){return Object.assign(e.bind(null),Se)}function gitInstanceFactory(e,r){var t;const s=new We;const o=createInstanceConfig(e&&(typeof e==="string"?{baseDir:e}:e)||{},r);if(!folderExists(o.baseDir)){throw new E(o,`Cannot use simple-git on a directory that does not exist`)}if(Array.isArray(o.config)){s.add(commandConfigPrefixingPlugin(o.config))}s.add(blockUnsafeOperationsPlugin(o.unsafe));s.add(suffixPathsPlugin());s.add(completionDetectionPlugin(o.completion));o.abort&&s.add(abortPlugin(o.abort));o.progress&&s.add(progressMonitorPlugin(o.progress));o.timeout&&s.add(timeoutPlugin(o.timeout));o.spawnOptions&&s.add(spawnOptionsPlugin(o.spawnOptions));s.add(errorDetectionPlugin(errorDetectionHandler(true)));o.errors&&s.add(errorDetectionPlugin(o.errors));customBinaryPlugin(s,o.binary,(t=o.unsafe)==null?void 0:t.allowUnsafeCustomBinary);return new Rs(o,s)}var Rs;var Ds=__esm({"src/lib/git-factory.ts"(){"use strict";Re();Ye();Qe();K();Rs=As()}});var Us={};__export(Us,{gitP:()=>gitP});function gitP(...e){let r;let t=Promise.resolve();try{r=gitInstanceFactory(...e)}catch(e){t=Promise.reject(e)}function builderReturn(){return s}function chainReturn(){return t}const s=[...Ls,...xs].reduce(((e,t)=>{const s=xs.includes(t);const o=s?asyncWrapper(t,r):syncWrapper(t,r,e);const n=s?chainReturn:builderReturn;Object.defineProperty(e,t,{enumerable:false,configurable:false,value:r?o:n});return e}),{});return s;function asyncWrapper(e,r){return function(...s){if(typeof s[s.length]==="function"){throw new TypeError("Promise interface requires that handlers are not supplied inline, trailing function not allowed in call to "+e)}return t.then((function(){return new Promise((function(t,o){const callback=(e,r)=>{if(e){return o(toError(e))}t(r)};s.push(callback);r[e].apply(r,s)}))}))}}function syncWrapper(e,r,t){return(...s)=>{r[e](...s);return t}}}function toError(e){if(e instanceof Error){return e}if(typeof e==="string"){return new Error(e)}return new f(e)}var Ls,xs;var js=__esm({"src/lib/runners/promise-wrapped.ts"(){"use strict";h();Ds();Ls=["customBinary","env","outputHandler","silent"];xs=["add","addAnnotatedTag","addConfig","addRemote","addTag","applyPatch","binaryCatFile","branch","branchLocal","catFile","checkIgnore","checkIsRepo","checkout","checkoutBranch","checkoutLatestTag","checkoutLocalBranch","clean","clone","commit","cwd","deleteLocalBranch","deleteLocalBranches","diff","diffSummary","exec","fetch","getRemotes","init","listConfig","listRemote","log","merge","mergeFromTo","mirror","mv","pull","push","pushTags","raw","rebase","remote","removeRemote","reset","revert","revparse","rm","rmKeepLocal","show","stash","stashList","status","subModule","submoduleAdd","submoduleInit","submoduleUpdate","tag","tags","updateServerInfo"]}});var{gitP:Is}=(js(),__toCommonJS(Us));var{esModuleFactory:Ms,gitInstanceFactory:qs,gitExportFactory:Bs}=(Ds(),__toCommonJS(Ss));var Ns=Ms(Bs(qs));e.exports=Object.assign(Ns,{gitP:Is,simpleGit:Ns})},787:(e,r,t)=>{r.formatArgs=formatArgs;r.save=save;r.load=load;r.useColors=useColors;r.storage=localstorage();r.destroy=(()=>{let e=false;return()=>{if(!e){e=true;console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")}}})();r.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"];function useColors(){if(typeof window!=="undefined"&&window.process&&(window.process.type==="renderer"||window.process.__nwjs)){return true}if(typeof navigator!=="undefined"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)){return false}let e;return typeof document!=="undefined"&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||typeof window!=="undefined"&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||typeof navigator!=="undefined"&&navigator.userAgent&&(e=navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/))&&parseInt(e[1],10)>=31||typeof navigator!=="undefined"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)}function formatArgs(r){r[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+r[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff);if(!this.useColors){return}const t="color: "+this.color;r.splice(1,0,t,"color: inherit");let s=0;let o=0;r[0].replace(/%[a-zA-Z%]/g,(e=>{if(e==="%%"){return}s++;if(e==="%c"){o=s}}));r.splice(o,0,t)}r.log=console.debug||console.log||(()=>{});function save(e){try{if(e){r.storage.setItem("debug",e)}else{r.storage.removeItem("debug")}}catch(e){}}function load(){let e;try{e=r.storage.getItem("debug")}catch(e){}if(!e&&typeof process!=="undefined"&&"env"in process){e=process.env.DEBUG}return e}function localstorage(){try{return localStorage}catch(e){}}e.exports=t(142)(r);const{formatters:s}=e.exports;s.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},142:(e,r,t)=>{function setup(e){createDebug.debug=createDebug;createDebug.default=createDebug;createDebug.coerce=coerce;createDebug.disable=disable;createDebug.enable=enable;createDebug.enabled=enabled;createDebug.humanize=t(744);createDebug.destroy=destroy;Object.keys(e).forEach((r=>{createDebug[r]=e[r]}));createDebug.names=[];createDebug.skips=[];createDebug.formatters={};function selectColor(e){let r=0;for(let t=0;t<e.length;t++){r=(r<<5)-r+e.charCodeAt(t);r|=0}return createDebug.colors[Math.abs(r)%createDebug.colors.length]}createDebug.selectColor=selectColor;function createDebug(e){let r;let t=null;let s;let o;function debug(...e){if(!debug.enabled){return}const t=debug;const s=Number(new Date);const o=s-(r||s);t.diff=o;t.prev=r;t.curr=s;r=s;e[0]=createDebug.coerce(e[0]);if(typeof e[0]!=="string"){e.unshift("%O")}let n=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,((r,s)=>{if(r==="%%"){return"%"}n++;const o=createDebug.formatters[s];if(typeof o==="function"){const s=e[n];r=o.call(t,s);e.splice(n,1);n--}return r}));createDebug.formatArgs.call(t,e);const i=t.log||createDebug.log;i.apply(t,e)}debug.namespace=e;debug.useColors=createDebug.useColors();debug.color=createDebug.selectColor(e);debug.extend=extend;debug.destroy=createDebug.destroy;Object.defineProperty(debug,"enabled",{enumerable:true,configurable:false,get:()=>{if(t!==null){return t}if(s!==createDebug.namespaces){s=createDebug.namespaces;o=createDebug.enabled(e)}return o},set:e=>{t=e}});if(typeof createDebug.init==="function"){createDebug.init(debug)}return debug}function extend(e,r){const t=createDebug(this.namespace+(typeof r==="undefined"?":":r)+e);t.log=this.log;return t}function enable(e){createDebug.save(e);createDebug.namespaces=e;createDebug.names=[];createDebug.skips=[];let r;const t=(typeof e==="string"?e:"").split(/[\s,]+/);const s=t.length;for(r=0;r<s;r++){if(!t[r]){continue}e=t[r].replace(/\*/g,".*?");if(e[0]==="-"){createDebug.skips.push(new RegExp("^"+e.slice(1)+"$"))}else{createDebug.names.push(new RegExp("^"+e+"$"))}}}function disable(){const e=[...createDebug.names.map(toNamespace),...createDebug.skips.map(toNamespace).map((e=>"-"+e))].join(",");createDebug.enable("");return e}function enabled(e){if(e[e.length-1]==="*"){return true}let r;let t;for(r=0,t=createDebug.skips.length;r<t;r++){if(createDebug.skips[r].test(e)){return false}}for(r=0,t=createDebug.names.length;r<t;r++){if(createDebug.names[r].test(e)){return true}}return false}function toNamespace(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}function coerce(e){if(e instanceof Error){return e.stack||e.message}return e}function destroy(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")}createDebug.enable(createDebug.load());return createDebug}e.exports=setup},567:(e,r,t)=>{if(typeof process==="undefined"||process.type==="renderer"||process.browser===true||process.__nwjs){e.exports=t(787)}else{e.exports=t(431)}},431:(e,r,t)=>{const s=t(18);const o=t(23);r.init=init;r.log=log;r.formatArgs=formatArgs;r.save=save;r.load=load;r.useColors=useColors;r.destroy=o.deprecate((()=>{}),"Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");r.colors=[6,2,3,4,5,1];try{const e=t(450);if(e&&(e.stderr||e).level>=2){r.colors=[20,21,26,27,32,33,38,39,40,41,42,43,44,45,56,57,62,63,68,69,74,75,76,77,78,79,80,81,92,93,98,99,112,113,128,129,134,135,148,149,160,161,162,163,164,165,166,167,168,169,170,171,172,173,178,179,184,185,196,197,198,199,200,201,202,203,204,205,206,207,208,209,214,215,220,221]}}catch(e){}r.inspectOpts=Object.keys(process.env).filter((e=>/^debug_/i.test(e))).reduce(((e,r)=>{const t=r.substring(6).toLowerCase().replace(/_([a-z])/g,((e,r)=>r.toUpperCase()));let s=process.env[r];if(/^(yes|on|true|enabled)$/i.test(s)){s=true}else if(/^(no|off|false|disabled)$/i.test(s)){s=false}else if(s==="null"){s=null}else{s=Number(s)}e[t]=s;return e}),{});function useColors(){return"colors"in r.inspectOpts?Boolean(r.inspectOpts.colors):s.isatty(process.stderr.fd)}function formatArgs(r){const{namespace:t,useColors:s}=this;if(s){const s=this.color;const o="[3"+(s<8?s:"8;5;"+s);const n=`  ${o};1m${t} [0m`;r[0]=n+r[0].split("\n").join("\n"+n);r.push(o+"m+"+e.exports.humanize(this.diff)+"[0m")}else{r[0]=getDate()+t+" "+r[0]}}function getDate(){if(r.inspectOpts.hideDate){return""}return(new Date).toISOString()+" "}function log(...e){return process.stderr.write(o.formatWithOptions(r.inspectOpts,...e)+"\n")}function save(e){if(e){process.env.DEBUG=e}else{delete process.env.DEBUG}}function load(){return process.env.DEBUG}function init(e){e.inspectOpts={};const t=Object.keys(r.inspectOpts);for(let s=0;s<t.length;s++){e.inspectOpts[t[s]]=r.inspectOpts[t[s]]}}e.exports=t(142)(r);const{formatters:n}=e.exports;n.o=function(e){this.inspectOpts.colors=this.useColors;return o.inspect(e,this.inspectOpts).split("\n").map((e=>e.trim())).join(" ")};n.O=function(e){this.inspectOpts.colors=this.useColors;return o.inspect(e,this.inspectOpts)}},450:(e,r,t)=>{"use strict";const s=t(857);const o=t(18);const n=t(813);const{env:i}=process;let a;if(n("no-color")||n("no-colors")||n("color=false")||n("color=never")){a=0}else if(n("color")||n("colors")||n("color=true")||n("color=always")){a=1}function envForceColor(){if("FORCE_COLOR"in i){if(i.FORCE_COLOR==="true"){return 1}if(i.FORCE_COLOR==="false"){return 0}return i.FORCE_COLOR.length===0?1:Math.min(Number.parseInt(i.FORCE_COLOR,10),3)}}function translateLevel(e){if(e===0){return false}return{level:e,hasBasic:true,has256:e>=2,has16m:e>=3}}function supportsColor(e,{streamIsTTY:r,sniffFlags:t=true}={}){const o=envForceColor();if(o!==undefined){a=o}const c=t?a:o;if(c===0){return 0}if(t){if(n("color=16m")||n("color=full")||n("color=truecolor")){return 3}if(n("color=256")){return 2}}if(e&&!r&&c===undefined){return 0}const u=c||0;if(i.TERM==="dumb"){return u}if(process.platform==="win32"){const e=s.release().split(".");if(Number(e[0])>=10&&Number(e[2])>=10586){return Number(e[2])>=14931?3:2}return 1}if("CI"in i){if(["TRAVIS","CIRCLECI","APPVEYOR","GITLAB_CI","GITHUB_ACTIONS","BUILDKITE","DRONE"].some((e=>e in i))||i.CI_NAME==="codeship"){return 1}return u}if("TEAMCITY_VERSION"in i){return/^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(i.TEAMCITY_VERSION)?1:0}if(i.COLORTERM==="truecolor"){return 3}if("TERM_PROGRAM"in i){const e=Number.parseInt((i.TERM_PROGRAM_VERSION||"").split(".")[0],10);switch(i.TERM_PROGRAM){case"iTerm.app":return e>=3?3:2;case"Apple_Terminal":return 2}}if(/-256(color)?$/i.test(i.TERM)){return 2}if(/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(i.TERM)){return 1}if("COLORTERM"in i){return 1}return u}function getSupportLevel(e,r={}){const t=supportsColor(e,{streamIsTTY:e&&e.isTTY,...r});return translateLevel(t)}e.exports={supportsColor:getSupportLevel,stdout:getSupportLevel({isTTY:o.isatty(1)}),stderr:getSupportLevel({isTTY:o.isatty(2)})}},317:e=>{"use strict";e.exports=require("child_process")},896:e=>{"use strict";e.exports=require("fs")},474:e=>{"use strict";e.exports=require("node:events")},857:e=>{"use strict";e.exports=require("os")},18:e=>{"use strict";e.exports=require("tty")},23:e=>{"use strict";e.exports=require("util")},380:(e,r,t)=>{"use strict";t.r(r);t.d(r,{Octokit:()=>I});function getUserAgent(){if(typeof navigator==="object"&&"userAgent"in navigator){return navigator.userAgent}if(typeof process==="object"&&process.version!==undefined){return`Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`}return"<environment undetectable>"}function register(e,r,t,s){if(typeof t!=="function"){throw new Error("method for before hook must be a function")}if(!s){s={}}if(Array.isArray(r)){return r.reverse().reduce(((r,t)=>register.bind(null,e,t,r,s)),t)()}return Promise.resolve().then((()=>{if(!e.registry[r]){return t(s)}return e.registry[r].reduce(((e,r)=>r.hook.bind(null,e,s)),t)()}))}function addHook(e,r,t,s){const o=s;if(!e.registry[t]){e.registry[t]=[]}if(r==="before"){s=(e,r)=>Promise.resolve().then(o.bind(null,r)).then(e.bind(null,r))}if(r==="after"){s=(e,r)=>{let t;return Promise.resolve().then(e.bind(null,r)).then((e=>{t=e;return o(t,r)})).then((()=>t))}}if(r==="error"){s=(e,r)=>Promise.resolve().then(e.bind(null,r)).catch((e=>o(e,r)))}e.registry[t].push({hook:s,orig:o})}function removeHook(e,r,t){if(!e.registry[r]){return}const s=e.registry[r].map((e=>e.orig)).indexOf(t);if(s===-1){return}e.registry[r].splice(s,1)}const s=Function.bind;const o=s.bind(s);function bindApi(e,r,t){const s=o(removeHook,null).apply(null,t?[r,t]:[r]);e.api={remove:s};e.remove=s;["before","error","after","wrap"].forEach((s=>{const n=t?[r,s,t]:[r,s];e[s]=e.api[s]=o(addHook,null).apply(null,n)}))}function Singular(){const e=Symbol("Singular");const r={registry:{}};const t=register.bind(null,r,e);bindApi(t,r,e);return t}function Collection(){const e={registry:{}};const r=register.bind(null,e);bindApi(r,e);return r}const n={Singular:Singular,Collection:Collection};var i="0.0.0-development";var a=`octokit-endpoint.js/${i} ${getUserAgent()}`;var c={method:"GET",baseUrl:"https://api.github.com",headers:{accept:"application/vnd.github.v3+json","user-agent":a},mediaType:{format:""}};function lowercaseKeys(e){if(!e){return{}}return Object.keys(e).reduce(((r,t)=>{r[t.toLowerCase()]=e[t];return r}),{})}function isPlainObject(e){if(typeof e!=="object"||e===null)return false;if(Object.prototype.toString.call(e)!=="[object Object]")return false;const r=Object.getPrototypeOf(e);if(r===null)return true;const t=Object.prototype.hasOwnProperty.call(r,"constructor")&&r.constructor;return typeof t==="function"&&t instanceof t&&Function.prototype.call(t)===Function.prototype.call(e)}function mergeDeep(e,r){const t=Object.assign({},e);Object.keys(r).forEach((s=>{if(isPlainObject(r[s])){if(!(s in e))Object.assign(t,{[s]:r[s]});else t[s]=mergeDeep(e[s],r[s])}else{Object.assign(t,{[s]:r[s]})}}));return t}function removeUndefinedProperties(e){for(const r in e){if(e[r]===void 0){delete e[r]}}return e}function merge(e,r,t){if(typeof r==="string"){let[e,s]=r.split(" ");t=Object.assign(s?{method:e,url:s}:{url:e},t)}else{t=Object.assign({},r)}t.headers=lowercaseKeys(t.headers);removeUndefinedProperties(t);removeUndefinedProperties(t.headers);const s=mergeDeep(e||{},t);if(t.url==="/graphql"){if(e&&e.mediaType.previews?.length){s.mediaType.previews=e.mediaType.previews.filter((e=>!s.mediaType.previews.includes(e))).concat(s.mediaType.previews)}s.mediaType.previews=(s.mediaType.previews||[]).map((e=>e.replace(/-preview/,"")))}return s}function addQueryParameters(e,r){const t=/\?/.test(e)?"&":"?";const s=Object.keys(r);if(s.length===0){return e}return e+t+s.map((e=>{if(e==="q"){return"q="+r.q.split("+").map(encodeURIComponent).join("+")}return`${e}=${encodeURIComponent(r[e])}`})).join("&")}var u=/\{[^}]+\}/g;function removeNonChars(e){return e.replace(/^\W+|\W+$/g,"").split(/,/)}function extractUrlVariableNames(e){const r=e.match(u);if(!r){return[]}return r.map(removeNonChars).reduce(((e,r)=>e.concat(r)),[])}function omit(e,r){const t={__proto__:null};for(const s of Object.keys(e)){if(r.indexOf(s)===-1){t[s]=e[s]}}return t}function encodeReserved(e){return e.split(/(%[0-9A-Fa-f]{2})/g).map((function(e){if(!/%[0-9A-Fa-f]/.test(e)){e=encodeURI(e).replace(/%5B/g,"[").replace(/%5D/g,"]")}return e})).join("")}function encodeUnreserved(e){return encodeURIComponent(e).replace(/[!'()*]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function encodeValue(e,r,t){r=e==="+"||e==="#"?encodeReserved(r):encodeUnreserved(r);if(t){return encodeUnreserved(t)+"="+r}else{return r}}function isDefined(e){return e!==void 0&&e!==null}function isKeyOperator(e){return e===";"||e==="&"||e==="?"}function getValues(e,r,t,s){var o=e[t],n=[];if(isDefined(o)&&o!==""){if(typeof o==="string"||typeof o==="number"||typeof o==="boolean"){o=o.toString();if(s&&s!=="*"){o=o.substring(0,parseInt(s,10))}n.push(encodeValue(r,o,isKeyOperator(r)?t:""))}else{if(s==="*"){if(Array.isArray(o)){o.filter(isDefined).forEach((function(e){n.push(encodeValue(r,e,isKeyOperator(r)?t:""))}))}else{Object.keys(o).forEach((function(e){if(isDefined(o[e])){n.push(encodeValue(r,o[e],e))}}))}}else{const e=[];if(Array.isArray(o)){o.filter(isDefined).forEach((function(t){e.push(encodeValue(r,t))}))}else{Object.keys(o).forEach((function(t){if(isDefined(o[t])){e.push(encodeUnreserved(t));e.push(encodeValue(r,o[t].toString()))}}))}if(isKeyOperator(r)){n.push(encodeUnreserved(t)+"="+e.join(","))}else if(e.length!==0){n.push(e.join(","))}}}}else{if(r===";"){if(isDefined(o)){n.push(encodeUnreserved(t))}}else if(o===""&&(r==="&"||r==="?")){n.push(encodeUnreserved(t)+"=")}else if(o===""){n.push("")}}return n}function parseUrl(e){return{expand:expand.bind(null,e)}}function expand(e,r){var t=["+","#",".","/",";","?","&"];e=e.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,(function(e,s,o){if(s){let e="";const o=[];if(t.indexOf(s.charAt(0))!==-1){e=s.charAt(0);s=s.substr(1)}s.split(/,/g).forEach((function(t){var s=/([^:\*]*)(?::(\d+)|(\*))?/.exec(t);o.push(getValues(r,e,s[1],s[2]||s[3]))}));if(e&&e!=="+"){var n=",";if(e==="?"){n="&"}else if(e!=="#"){n=e}return(o.length!==0?e:"")+o.join(n)}else{return o.join(",")}}else{return encodeReserved(o)}}));if(e==="/"){return e}else{return e.replace(/\/$/,"")}}function parse(e){let r=e.method.toUpperCase();let t=(e.url||"/").replace(/:([a-z]\w+)/g,"{$1}");let s=Object.assign({},e.headers);let o;let n=omit(e,["method","baseUrl","url","headers","request","mediaType"]);const i=extractUrlVariableNames(t);t=parseUrl(t).expand(n);if(!/^http/.test(t)){t=e.baseUrl+t}const a=Object.keys(e).filter((e=>i.includes(e))).concat("baseUrl");const c=omit(n,a);const u=/application\/octet-stream/i.test(s.accept);if(!u){if(e.mediaType.format){s.accept=s.accept.split(/,/).map((r=>r.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,`application/vnd$1$2.${e.mediaType.format}`))).join(",")}if(t.endsWith("/graphql")){if(e.mediaType.previews?.length){const r=s.accept.match(/[\w-]+(?=-preview)/g)||[];s.accept=r.concat(e.mediaType.previews).map((r=>{const t=e.mediaType.format?`.${e.mediaType.format}`:"+json";return`application/vnd.github.${r}-preview${t}`})).join(",")}}}if(["GET","HEAD"].includes(r)){t=addQueryParameters(t,c)}else{if("data"in c){o=c.data}else{if(Object.keys(c).length){o=c}}}if(!s["content-type"]&&typeof o!=="undefined"){s["content-type"]="application/json; charset=utf-8"}if(["PATCH","PUT"].includes(r)&&typeof o==="undefined"){o=""}return Object.assign({method:r,url:t,headers:s},typeof o!=="undefined"?{body:o}:null,e.request?{request:e.request}:null)}function endpointWithDefaults(e,r,t){return parse(merge(e,r,t))}function withDefaults(e,r){const t=merge(e,r);const s=endpointWithDefaults.bind(null,t);return Object.assign(s,{DEFAULTS:t,defaults:withDefaults.bind(null,t),merge:merge.bind(null,t),parse:parse})}var l=withDefaults(null,c);class RequestError extends Error{name;status;request;response;constructor(e,r,t){super(e);this.name="HttpError";this.status=Number.parseInt(r);if(Number.isNaN(this.status)){this.status=0}if("response"in t){this.response=t.response}const s=Object.assign({},t.request);if(t.request.headers.authorization){s.headers=Object.assign({},t.request.headers,{authorization:t.request.headers.authorization.replace(/ .*$/," [REDACTED]")})}s.url=s.url.replace(/\bclient_secret=\w+/g,"client_secret=[REDACTED]").replace(/\baccess_token=\w+/g,"access_token=[REDACTED]");this.request=s}}var p="0.0.0-development";var g={headers:{"user-agent":`octokit-request.js/${p} ${getUserAgent()}`}};function dist_bundle_isPlainObject(e){if(typeof e!=="object"||e===null)return false;if(Object.prototype.toString.call(e)!=="[object Object]")return false;const r=Object.getPrototypeOf(e);if(r===null)return true;const t=Object.prototype.hasOwnProperty.call(r,"constructor")&&r.constructor;return typeof t==="function"&&t instanceof t&&Function.prototype.call(t)===Function.prototype.call(e)}async function fetchWrapper(e){const r=e.request?.fetch||globalThis.fetch;if(!r){throw new Error("fetch is not set. Please pass a fetch implementation as new Octokit({ request: { fetch }}). Learn more at https://github.com/octokit/octokit.js/#fetch-missing")}const t=e.request?.log||console;const s=e.request?.parseSuccessResponseBody!==false;const o=dist_bundle_isPlainObject(e.body)||Array.isArray(e.body)?JSON.stringify(e.body):e.body;const n=Object.fromEntries(Object.entries(e.headers).map((([e,r])=>[e,String(r)])));let i;try{i=await r(e.url,{method:e.method,body:o,redirect:e.request?.redirect,headers:n,signal:e.request?.signal,...e.body&&{duplex:"half"}})}catch(r){let t="Unknown Error";if(r instanceof Error){if(r.name==="AbortError"){r.status=500;throw r}t=r.message;if(r.name==="TypeError"&&"cause"in r){if(r.cause instanceof Error){t=r.cause.message}else if(typeof r.cause==="string"){t=r.cause}}}const s=new RequestError(t,500,{request:e});s.cause=r;throw s}const a=i.status;const c=i.url;const u={};for(const[e,r]of i.headers){u[e]=r}const l={url:c,status:a,headers:u,data:""};if("deprecation"in u){const r=u.link&&u.link.match(/<([^>]+)>; rel="deprecation"/);const s=r&&r.pop();t.warn(`[@octokit/request] "${e.method} ${e.url}" is deprecated. It is scheduled to be removed on ${u.sunset}${s?`. See ${s}`:""}`)}if(a===204||a===205){return l}if(e.method==="HEAD"){if(a<400){return l}throw new RequestError(i.statusText,a,{response:l,request:e})}if(a===304){l.data=await getResponseData(i);throw new RequestError("Not modified",a,{response:l,request:e})}if(a>=400){l.data=await getResponseData(i);throw new RequestError(toErrorMessage(l.data),a,{response:l,request:e})}l.data=s?await getResponseData(i):i.body;return l}async function getResponseData(e){const r=e.headers.get("content-type");if(/application\/json/.test(r)){return e.json().catch((()=>e.text())).catch((()=>""))}if(!r||/^text\/|charset=utf-8$/.test(r)){return e.text()}return e.arrayBuffer()}function toErrorMessage(e){if(typeof e==="string"){return e}if(e instanceof ArrayBuffer){return"Unknown error"}if("message"in e){const r="documentation_url"in e?` - ${e.documentation_url}`:"";return Array.isArray(e.errors)?`${e.message}: ${e.errors.map((e=>JSON.stringify(e))).join(", ")}${r}`:`${e.message}${r}`}return`Unknown error: ${JSON.stringify(e)}`}function dist_bundle_withDefaults(e,r){const t=e.defaults(r);const newApi=function(e,r){const s=t.merge(e,r);if(!s.request||!s.request.hook){return fetchWrapper(t.parse(s))}const request2=(e,r)=>fetchWrapper(t.parse(t.merge(e,r)));Object.assign(request2,{endpoint:t,defaults:dist_bundle_withDefaults.bind(null,t)});return s.request.hook(request2,s)};return Object.assign(newApi,{endpoint:t,defaults:dist_bundle_withDefaults.bind(null,t)})}var d=dist_bundle_withDefaults(l,g);var m="0.0.0-development";function _buildMessageForResponseErrors(e){return`Request failed due to following response errors:\n`+e.errors.map((e=>` - ${e.message}`)).join("\n")}var f=class extends Error{constructor(e,r,t){super(_buildMessageForResponseErrors(t));this.request=e;this.headers=r;this.response=t;this.errors=t.errors;this.data=t.data;if(Error.captureStackTrace){Error.captureStackTrace(this,this.constructor)}}name="GraphqlResponseError";errors;data};var h=["method","baseUrl","url","headers","request","query","mediaType"];var T=["query","method","url"];var b=/\/api\/v3\/?$/;function graphql(e,r,t){if(t){if(typeof r==="string"&&"query"in t){return Promise.reject(new Error(`[@octokit/graphql] "query" cannot be used as variable name`))}for(const e in t){if(!T.includes(e))continue;return Promise.reject(new Error(`[@octokit/graphql] "${e}" cannot be used as variable name`))}}const s=typeof r==="string"?Object.assign({query:r},t):r;const o=Object.keys(s).reduce(((e,r)=>{if(h.includes(r)){e[r]=s[r];return e}if(!e.variables){e.variables={}}e.variables[r]=s[r];return e}),{});const n=s.baseUrl||e.endpoint.DEFAULTS.baseUrl;if(b.test(n)){o.url=n.replace(b,"/api/graphql")}return e(o).then((e=>{if(e.data.errors){const r={};for(const t of Object.keys(e.headers)){r[t]=e.headers[t]}throw new f(o,r,e.data)}return e.data.data}))}function graphql_dist_bundle_withDefaults(e,r){const t=e.defaults(r);const newApi=(e,r)=>graphql(t,e,r);return Object.assign(newApi,{defaults:graphql_dist_bundle_withDefaults.bind(null,t),endpoint:t.endpoint})}var E=graphql_dist_bundle_withDefaults(d,{headers:{"user-agent":`octokit-graphql.js/${m} ${getUserAgent()}`},method:"POST",url:"/graphql"});function withCustomRequest(e){return graphql_dist_bundle_withDefaults(e,{method:"POST",url:"/graphql"})}var w=/^v1\./;var _=/^ghs_/;var k=/^ghu_/;async function auth(e){const r=e.split(/\./).length===3;const t=w.test(e)||_.test(e);const s=k.test(e);const o=r?"app":t?"installation":s?"user-to-server":"oauth";return{type:"token",token:e,tokenType:o}}function withAuthorizationPrefix(e){if(e.split(/\./).length===3){return`bearer ${e}`}return`token ${e}`}async function hook(e,r,t,s){const o=r.endpoint.merge(t,s);o.headers.authorization=withAuthorizationPrefix(e);return r(o)}var v=function createTokenAuth2(e){if(!e){throw new Error("[@octokit/auth-token] No token passed to createTokenAuth")}if(typeof e!=="string"){throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string")}e=e.replace(/^(token|bearer) +/i,"");return Object.assign(auth.bind(null,e),{hook:hook.bind(null,e)})};const y="6.1.2";const noop=()=>{};const G=console.warn.bind(console);const O=console.error.bind(console);const C=`octokit-core.js/${y} ${getUserAgent()}`;class Octokit{static VERSION=y;static defaults(e){const r=class extends(this){constructor(...r){const t=r[0]||{};if(typeof e==="function"){super(e(t));return}super(Object.assign({},e,t,t.userAgent&&e.userAgent?{userAgent:`${t.userAgent} ${e.userAgent}`}:null))}};return r}static plugins=[];static plugin(...e){const r=this.plugins;const t=class extends(this){static plugins=r.concat(e.filter((e=>!r.includes(e))))};return t}constructor(e={}){const r=new n.Collection;const t={baseUrl:d.endpoint.DEFAULTS.baseUrl,headers:{},request:Object.assign({},e.request,{hook:r.bind(null,"request")}),mediaType:{previews:[],format:""}};t.headers["user-agent"]=e.userAgent?`${e.userAgent} ${C}`:C;if(e.baseUrl){t.baseUrl=e.baseUrl}if(e.previews){t.mediaType.previews=e.previews}if(e.timeZone){t.headers["time-zone"]=e.timeZone}this.request=d.defaults(t);this.graphql=withCustomRequest(this.request).defaults(t);this.log=Object.assign({debug:noop,info:noop,warn:G,error:O},e.log);this.hook=r;if(!e.authStrategy){if(!e.auth){this.auth=async()=>({type:"unauthenticated"})}else{const t=v(e.auth);r.wrap("request",t.hook);this.auth=t}}else{const{authStrategy:t,...s}=e;const o=t(Object.assign({request:this.request,log:this.log,octokit:this,octokitOptions:s},e.auth));r.wrap("request",o.hook);this.auth=o}const s=this.constructor;for(let r=0;r<s.plugins.length;++r){Object.assign(this,s.plugins[r](this,e))}}request;graphql;log;hook;auth}const P="5.3.1";function requestLog(e){e.hook.wrap("request",((r,t)=>{e.log.debug("request",t);const s=Date.now();const o=e.request.endpoint.parse(t);const n=o.url.replace(t.baseUrl,"");return r(t).then((r=>{const t=r.headers["x-github-request-id"];e.log.info(`${o.method} ${n} - ${r.status} with id ${t} in ${Date.now()-s}ms`);return r})).catch((r=>{const t=r.response?.headers["x-github-request-id"]||"UNKNOWN";e.log.error(`${o.method} ${n} - ${r.status} with id ${t} in ${Date.now()-s}ms`);throw r}))}))}requestLog.VERSION=P;var F="0.0.0-development";function normalizePaginatedListResponse(e){if(!e.data){return{...e,data:[]}}const r="total_count"in e.data&&!("url"in e.data);if(!r)return e;const t=e.data.incomplete_results;const s=e.data.repository_selection;const o=e.data.total_count;delete e.data.incomplete_results;delete e.data.repository_selection;delete e.data.total_count;const n=Object.keys(e.data)[0];const i=e.data[n];e.data=i;if(typeof t!=="undefined"){e.data.incomplete_results=t}if(typeof s!=="undefined"){e.data.repository_selection=s}e.data.total_count=o;return e}function iterator(e,r,t){const s=typeof r==="function"?r.endpoint(t):e.request.endpoint(r,t);const o=typeof r==="function"?r:e.request;const n=s.method;const i=s.headers;let a=s.url;return{[Symbol.asyncIterator]:()=>({async next(){if(!a)return{done:true};try{const e=await o({method:n,url:a,headers:i});const r=normalizePaginatedListResponse(e);a=((r.headers.link||"").match(/<([^>]+)>;\s*rel="next"/)||[])[1];return{value:r}}catch(e){if(e.status!==409)throw e;a="";return{value:{status:200,headers:{},data:[]}}}}})}}function paginate(e,r,t,s){if(typeof t==="function"){s=t;t=void 0}return gather(e,[],iterator(e,r,t)[Symbol.asyncIterator](),s)}function gather(e,r,t,s){return t.next().then((o=>{if(o.done){return r}let n=false;function done(){n=true}r=r.concat(s?s(o.value,done):o.value.data);if(n){return r}return gather(e,r,t,s)}))}var A=Object.assign(paginate,{iterator:iterator});var S=null&&["GET /advisories","GET /app/hook/deliveries","GET /app/installation-requests","GET /app/installations","GET /assignments/{assignment_id}/accepted_assignments","GET /classrooms","GET /classrooms/{classroom_id}/assignments","GET /enterprises/{enterprise}/copilot/usage","GET /enterprises/{enterprise}/dependabot/alerts","GET /enterprises/{enterprise}/secret-scanning/alerts","GET /events","GET /gists","GET /gists/public","GET /gists/starred","GET /gists/{gist_id}/comments","GET /gists/{gist_id}/commits","GET /gists/{gist_id}/forks","GET /installation/repositories","GET /issues","GET /licenses","GET /marketplace_listing/plans","GET /marketplace_listing/plans/{plan_id}/accounts","GET /marketplace_listing/stubbed/plans","GET /marketplace_listing/stubbed/plans/{plan_id}/accounts","GET /networks/{owner}/{repo}/events","GET /notifications","GET /organizations","GET /orgs/{org}/actions/cache/usage-by-repository","GET /orgs/{org}/actions/permissions/repositories","GET /orgs/{org}/actions/runners","GET /orgs/{org}/actions/secrets","GET /orgs/{org}/actions/secrets/{secret_name}/repositories","GET /orgs/{org}/actions/variables","GET /orgs/{org}/actions/variables/{name}/repositories","GET /orgs/{org}/blocks","GET /orgs/{org}/code-scanning/alerts","GET /orgs/{org}/codespaces","GET /orgs/{org}/codespaces/secrets","GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories","GET /orgs/{org}/copilot/billing/seats","GET /orgs/{org}/copilot/usage","GET /orgs/{org}/dependabot/alerts","GET /orgs/{org}/dependabot/secrets","GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories","GET /orgs/{org}/events","GET /orgs/{org}/failed_invitations","GET /orgs/{org}/hooks","GET /orgs/{org}/hooks/{hook_id}/deliveries","GET /orgs/{org}/installations","GET /orgs/{org}/invitations","GET /orgs/{org}/invitations/{invitation_id}/teams","GET /orgs/{org}/issues","GET /orgs/{org}/members","GET /orgs/{org}/members/{username}/codespaces","GET /orgs/{org}/migrations","GET /orgs/{org}/migrations/{migration_id}/repositories","GET /orgs/{org}/organization-roles/{role_id}/teams","GET /orgs/{org}/organization-roles/{role_id}/users","GET /orgs/{org}/outside_collaborators","GET /orgs/{org}/packages","GET /orgs/{org}/packages/{package_type}/{package_name}/versions","GET /orgs/{org}/personal-access-token-requests","GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories","GET /orgs/{org}/personal-access-tokens","GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories","GET /orgs/{org}/projects","GET /orgs/{org}/properties/values","GET /orgs/{org}/public_members","GET /orgs/{org}/repos","GET /orgs/{org}/rulesets","GET /orgs/{org}/rulesets/rule-suites","GET /orgs/{org}/secret-scanning/alerts","GET /orgs/{org}/security-advisories","GET /orgs/{org}/team/{team_slug}/copilot/usage","GET /orgs/{org}/teams","GET /orgs/{org}/teams/{team_slug}/discussions","GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments","GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions","GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions","GET /orgs/{org}/teams/{team_slug}/invitations","GET /orgs/{org}/teams/{team_slug}/members","GET /orgs/{org}/teams/{team_slug}/projects","GET /orgs/{org}/teams/{team_slug}/repos","GET /orgs/{org}/teams/{team_slug}/teams","GET /projects/columns/{column_id}/cards","GET /projects/{project_id}/collaborators","GET /projects/{project_id}/columns","GET /repos/{owner}/{repo}/actions/artifacts","GET /repos/{owner}/{repo}/actions/caches","GET /repos/{owner}/{repo}/actions/organization-secrets","GET /repos/{owner}/{repo}/actions/organization-variables","GET /repos/{owner}/{repo}/actions/runners","GET /repos/{owner}/{repo}/actions/runs","GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts","GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs","GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs","GET /repos/{owner}/{repo}/actions/secrets","GET /repos/{owner}/{repo}/actions/variables","GET /repos/{owner}/{repo}/actions/workflows","GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs","GET /repos/{owner}/{repo}/activity","GET /repos/{owner}/{repo}/assignees","GET /repos/{owner}/{repo}/branches","GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations","GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs","GET /repos/{owner}/{repo}/code-scanning/alerts","GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances","GET /repos/{owner}/{repo}/code-scanning/analyses","GET /repos/{owner}/{repo}/codespaces","GET /repos/{owner}/{repo}/codespaces/devcontainers","GET /repos/{owner}/{repo}/codespaces/secrets","GET /repos/{owner}/{repo}/collaborators","GET /repos/{owner}/{repo}/comments","GET /repos/{owner}/{repo}/comments/{comment_id}/reactions","GET /repos/{owner}/{repo}/commits","GET /repos/{owner}/{repo}/commits/{commit_sha}/comments","GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls","GET /repos/{owner}/{repo}/commits/{ref}/check-runs","GET /repos/{owner}/{repo}/commits/{ref}/check-suites","GET /repos/{owner}/{repo}/commits/{ref}/status","GET /repos/{owner}/{repo}/commits/{ref}/statuses","GET /repos/{owner}/{repo}/contributors","GET /repos/{owner}/{repo}/dependabot/alerts","GET /repos/{owner}/{repo}/dependabot/secrets","GET /repos/{owner}/{repo}/deployments","GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses","GET /repos/{owner}/{repo}/environments","GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies","GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps","GET /repos/{owner}/{repo}/environments/{environment_name}/secrets","GET /repos/{owner}/{repo}/environments/{environment_name}/variables","GET /repos/{owner}/{repo}/events","GET /repos/{owner}/{repo}/forks","GET /repos/{owner}/{repo}/hooks","GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries","GET /repos/{owner}/{repo}/invitations","GET /repos/{owner}/{repo}/issues","GET /repos/{owner}/{repo}/issues/comments","GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions","GET /repos/{owner}/{repo}/issues/events","GET /repos/{owner}/{repo}/issues/{issue_number}/comments","GET /repos/{owner}/{repo}/issues/{issue_number}/events","GET /repos/{owner}/{repo}/issues/{issue_number}/labels","GET /repos/{owner}/{repo}/issues/{issue_number}/reactions","GET /repos/{owner}/{repo}/issues/{issue_number}/timeline","GET /repos/{owner}/{repo}/keys","GET /repos/{owner}/{repo}/labels","GET /repos/{owner}/{repo}/milestones","GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels","GET /repos/{owner}/{repo}/notifications","GET /repos/{owner}/{repo}/pages/builds","GET /repos/{owner}/{repo}/projects","GET /repos/{owner}/{repo}/pulls","GET /repos/{owner}/{repo}/pulls/comments","GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions","GET /repos/{owner}/{repo}/pulls/{pull_number}/comments","GET /repos/{owner}/{repo}/pulls/{pull_number}/commits","GET /repos/{owner}/{repo}/pulls/{pull_number}/files","GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews","GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments","GET /repos/{owner}/{repo}/releases","GET /repos/{owner}/{repo}/releases/{release_id}/assets","GET /repos/{owner}/{repo}/releases/{release_id}/reactions","GET /repos/{owner}/{repo}/rules/branches/{branch}","GET /repos/{owner}/{repo}/rulesets","GET /repos/{owner}/{repo}/rulesets/rule-suites","GET /repos/{owner}/{repo}/secret-scanning/alerts","GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations","GET /repos/{owner}/{repo}/security-advisories","GET /repos/{owner}/{repo}/stargazers","GET /repos/{owner}/{repo}/subscribers","GET /repos/{owner}/{repo}/tags","GET /repos/{owner}/{repo}/teams","GET /repos/{owner}/{repo}/topics","GET /repositories","GET /search/code","GET /search/commits","GET /search/issues","GET /search/labels","GET /search/repositories","GET /search/topics","GET /search/users","GET /teams/{team_id}/discussions","GET /teams/{team_id}/discussions/{discussion_number}/comments","GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions","GET /teams/{team_id}/discussions/{discussion_number}/reactions","GET /teams/{team_id}/invitations","GET /teams/{team_id}/members","GET /teams/{team_id}/projects","GET /teams/{team_id}/repos","GET /teams/{team_id}/teams","GET /user/blocks","GET /user/codespaces","GET /user/codespaces/secrets","GET /user/emails","GET /user/followers","GET /user/following","GET /user/gpg_keys","GET /user/installations","GET /user/installations/{installation_id}/repositories","GET /user/issues","GET /user/keys","GET /user/marketplace_purchases","GET /user/marketplace_purchases/stubbed","GET /user/memberships/orgs","GET /user/migrations","GET /user/migrations/{migration_id}/repositories","GET /user/orgs","GET /user/packages","GET /user/packages/{package_type}/{package_name}/versions","GET /user/public_emails","GET /user/repos","GET /user/repository_invitations","GET /user/social_accounts","GET /user/ssh_signing_keys","GET /user/starred","GET /user/subscriptions","GET /user/teams","GET /users","GET /users/{username}/events","GET /users/{username}/events/orgs/{org}","GET /users/{username}/events/public","GET /users/{username}/followers","GET /users/{username}/following","GET /users/{username}/gists","GET /users/{username}/gpg_keys","GET /users/{username}/keys","GET /users/{username}/orgs","GET /users/{username}/packages","GET /users/{username}/projects","GET /users/{username}/received_events","GET /users/{username}/received_events/public","GET /users/{username}/repos","GET /users/{username}/social_accounts","GET /users/{username}/ssh_signing_keys","GET /users/{username}/starred","GET /users/{username}/subscriptions"];function isPaginatingEndpoint(e){if(typeof e==="string"){return S.includes(e)}else{return false}}function paginateRest(e){return{paginate:Object.assign(paginate.bind(null,e),{iterator:iterator.bind(null,e)})}}paginateRest.VERSION=F;const R="13.2.6";const D={actions:{addCustomLabelsToSelfHostedRunnerForOrg:["POST /orgs/{org}/actions/runners/{runner_id}/labels"],addCustomLabelsToSelfHostedRunnerForRepo:["POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],approveWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"],cancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"],createEnvironmentVariable:["POST /repos/{owner}/{repo}/environments/{environment_name}/variables"],createOrUpdateEnvironmentSecret:["PUT /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"],createOrgVariable:["POST /orgs/{org}/actions/variables"],createRegistrationTokenForOrg:["POST /orgs/{org}/actions/runners/registration-token"],createRegistrationTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/registration-token"],createRemoveTokenForOrg:["POST /orgs/{org}/actions/runners/remove-token"],createRemoveTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/remove-token"],createRepoVariable:["POST /repos/{owner}/{repo}/actions/variables"],createWorkflowDispatch:["POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"],deleteActionsCacheById:["DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}"],deleteActionsCacheByKey:["DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}"],deleteArtifact:["DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],deleteEnvironmentSecret:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],deleteEnvironmentVariable:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],deleteOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}"],deleteOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"],deleteRepoVariable:["DELETE /repos/{owner}/{repo}/actions/variables/{name}"],deleteSelfHostedRunnerFromOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}"],deleteSelfHostedRunnerFromRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"],deleteWorkflowRun:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],deleteWorkflowRunLogs:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],disableSelectedRepositoryGithubActionsOrganization:["DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"],disableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"],downloadArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"],downloadJobLogsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"],downloadWorkflowRunAttemptLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"],downloadWorkflowRunLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],enableSelectedRepositoryGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"],enableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"],forceCancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel"],generateRunnerJitconfigForOrg:["POST /orgs/{org}/actions/runners/generate-jitconfig"],generateRunnerJitconfigForRepo:["POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig"],getActionsCacheList:["GET /repos/{owner}/{repo}/actions/caches"],getActionsCacheUsage:["GET /repos/{owner}/{repo}/actions/cache/usage"],getActionsCacheUsageByRepoForOrg:["GET /orgs/{org}/actions/cache/usage-by-repository"],getActionsCacheUsageForOrg:["GET /orgs/{org}/actions/cache/usage"],getAllowedActionsOrganization:["GET /orgs/{org}/actions/permissions/selected-actions"],getAllowedActionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/selected-actions"],getArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],getCustomOidcSubClaimForRepo:["GET /repos/{owner}/{repo}/actions/oidc/customization/sub"],getEnvironmentPublicKey:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key"],getEnvironmentSecret:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],getEnvironmentVariable:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],getGithubActionsDefaultWorkflowPermissionsOrganization:["GET /orgs/{org}/actions/permissions/workflow"],getGithubActionsDefaultWorkflowPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/workflow"],getGithubActionsPermissionsOrganization:["GET /orgs/{org}/actions/permissions"],getGithubActionsPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions"],getJobForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],getOrgPublicKey:["GET /orgs/{org}/actions/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}"],getOrgVariable:["GET /orgs/{org}/actions/variables/{name}"],getPendingDeploymentsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],getRepoPermissions:["GET /repos/{owner}/{repo}/actions/permissions",{},{renamed:["actions","getGithubActionsPermissionsRepository"]}],getRepoPublicKey:["GET /repos/{owner}/{repo}/actions/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],getRepoVariable:["GET /repos/{owner}/{repo}/actions/variables/{name}"],getReviewsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"],getSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}"],getSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}"],getWorkflow:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],getWorkflowAccessToRepository:["GET /repos/{owner}/{repo}/actions/permissions/access"],getWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],getWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"],getWorkflowRunUsage:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"],getWorkflowUsage:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"],listArtifactsForRepo:["GET /repos/{owner}/{repo}/actions/artifacts"],listEnvironmentSecrets:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets"],listEnvironmentVariables:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables"],listJobsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"],listJobsForWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"],listLabelsForSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}/labels"],listLabelsForSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],listOrgSecrets:["GET /orgs/{org}/actions/secrets"],listOrgVariables:["GET /orgs/{org}/actions/variables"],listRepoOrganizationSecrets:["GET /repos/{owner}/{repo}/actions/organization-secrets"],listRepoOrganizationVariables:["GET /repos/{owner}/{repo}/actions/organization-variables"],listRepoSecrets:["GET /repos/{owner}/{repo}/actions/secrets"],listRepoVariables:["GET /repos/{owner}/{repo}/actions/variables"],listRepoWorkflows:["GET /repos/{owner}/{repo}/actions/workflows"],listRunnerApplicationsForOrg:["GET /orgs/{org}/actions/runners/downloads"],listRunnerApplicationsForRepo:["GET /repos/{owner}/{repo}/actions/runners/downloads"],listSelectedReposForOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}/repositories"],listSelectedReposForOrgVariable:["GET /orgs/{org}/actions/variables/{name}/repositories"],listSelectedRepositoriesEnabledGithubActionsOrganization:["GET /orgs/{org}/actions/permissions/repositories"],listSelfHostedRunnersForOrg:["GET /orgs/{org}/actions/runners"],listSelfHostedRunnersForRepo:["GET /repos/{owner}/{repo}/actions/runners"],listWorkflowRunArtifacts:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"],listWorkflowRuns:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"],listWorkflowRunsForRepo:["GET /repos/{owner}/{repo}/actions/runs"],reRunJobForWorkflowRun:["POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"],reRunWorkflow:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],reRunWorkflowFailedJobs:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"],removeAllCustomLabelsFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels"],removeAllCustomLabelsFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],removeCustomLabelFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"],removeCustomLabelFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],reviewCustomGatesForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule"],reviewPendingDeploymentsForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],setAllowedActionsOrganization:["PUT /orgs/{org}/actions/permissions/selected-actions"],setAllowedActionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"],setCustomLabelsForSelfHostedRunnerForOrg:["PUT /orgs/{org}/actions/runners/{runner_id}/labels"],setCustomLabelsForSelfHostedRunnerForRepo:["PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],setCustomOidcSubClaimForRepo:["PUT /repos/{owner}/{repo}/actions/oidc/customization/sub"],setGithubActionsDefaultWorkflowPermissionsOrganization:["PUT /orgs/{org}/actions/permissions/workflow"],setGithubActionsDefaultWorkflowPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/workflow"],setGithubActionsPermissionsOrganization:["PUT /orgs/{org}/actions/permissions"],setGithubActionsPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"],setSelectedReposForOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories"],setSelectedRepositoriesEnabledGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories"],setWorkflowAccessToRepository:["PUT /repos/{owner}/{repo}/actions/permissions/access"],updateEnvironmentVariable:["PATCH /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],updateOrgVariable:["PATCH /orgs/{org}/actions/variables/{name}"],updateRepoVariable:["PATCH /repos/{owner}/{repo}/actions/variables/{name}"]},activity:{checkRepoIsStarredByAuthenticatedUser:["GET /user/starred/{owner}/{repo}"],deleteRepoSubscription:["DELETE /repos/{owner}/{repo}/subscription"],deleteThreadSubscription:["DELETE /notifications/threads/{thread_id}/subscription"],getFeeds:["GET /feeds"],getRepoSubscription:["GET /repos/{owner}/{repo}/subscription"],getThread:["GET /notifications/threads/{thread_id}"],getThreadSubscriptionForAuthenticatedUser:["GET /notifications/threads/{thread_id}/subscription"],listEventsForAuthenticatedUser:["GET /users/{username}/events"],listNotificationsForAuthenticatedUser:["GET /notifications"],listOrgEventsForAuthenticatedUser:["GET /users/{username}/events/orgs/{org}"],listPublicEvents:["GET /events"],listPublicEventsForRepoNetwork:["GET /networks/{owner}/{repo}/events"],listPublicEventsForUser:["GET /users/{username}/events/public"],listPublicOrgEvents:["GET /orgs/{org}/events"],listReceivedEventsForUser:["GET /users/{username}/received_events"],listReceivedPublicEventsForUser:["GET /users/{username}/received_events/public"],listRepoEvents:["GET /repos/{owner}/{repo}/events"],listRepoNotificationsForAuthenticatedUser:["GET /repos/{owner}/{repo}/notifications"],listReposStarredByAuthenticatedUser:["GET /user/starred"],listReposStarredByUser:["GET /users/{username}/starred"],listReposWatchedByUser:["GET /users/{username}/subscriptions"],listStargazersForRepo:["GET /repos/{owner}/{repo}/stargazers"],listWatchedReposForAuthenticatedUser:["GET /user/subscriptions"],listWatchersForRepo:["GET /repos/{owner}/{repo}/subscribers"],markNotificationsAsRead:["PUT /notifications"],markRepoNotificationsAsRead:["PUT /repos/{owner}/{repo}/notifications"],markThreadAsDone:["DELETE /notifications/threads/{thread_id}"],markThreadAsRead:["PATCH /notifications/threads/{thread_id}"],setRepoSubscription:["PUT /repos/{owner}/{repo}/subscription"],setThreadSubscription:["PUT /notifications/threads/{thread_id}/subscription"],starRepoForAuthenticatedUser:["PUT /user/starred/{owner}/{repo}"],unstarRepoForAuthenticatedUser:["DELETE /user/starred/{owner}/{repo}"]},apps:{addRepoToInstallation:["PUT /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","addRepoToInstallationForAuthenticatedUser"]}],addRepoToInstallationForAuthenticatedUser:["PUT /user/installations/{installation_id}/repositories/{repository_id}"],checkToken:["POST /applications/{client_id}/token"],createFromManifest:["POST /app-manifests/{code}/conversions"],createInstallationAccessToken:["POST /app/installations/{installation_id}/access_tokens"],deleteAuthorization:["DELETE /applications/{client_id}/grant"],deleteInstallation:["DELETE /app/installations/{installation_id}"],deleteToken:["DELETE /applications/{client_id}/token"],getAuthenticated:["GET /app"],getBySlug:["GET /apps/{app_slug}"],getInstallation:["GET /app/installations/{installation_id}"],getOrgInstallation:["GET /orgs/{org}/installation"],getRepoInstallation:["GET /repos/{owner}/{repo}/installation"],getSubscriptionPlanForAccount:["GET /marketplace_listing/accounts/{account_id}"],getSubscriptionPlanForAccountStubbed:["GET /marketplace_listing/stubbed/accounts/{account_id}"],getUserInstallation:["GET /users/{username}/installation"],getWebhookConfigForApp:["GET /app/hook/config"],getWebhookDelivery:["GET /app/hook/deliveries/{delivery_id}"],listAccountsForPlan:["GET /marketplace_listing/plans/{plan_id}/accounts"],listAccountsForPlanStubbed:["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"],listInstallationReposForAuthenticatedUser:["GET /user/installations/{installation_id}/repositories"],listInstallationRequestsForAuthenticatedApp:["GET /app/installation-requests"],listInstallations:["GET /app/installations"],listInstallationsForAuthenticatedUser:["GET /user/installations"],listPlans:["GET /marketplace_listing/plans"],listPlansStubbed:["GET /marketplace_listing/stubbed/plans"],listReposAccessibleToInstallation:["GET /installation/repositories"],listSubscriptionsForAuthenticatedUser:["GET /user/marketplace_purchases"],listSubscriptionsForAuthenticatedUserStubbed:["GET /user/marketplace_purchases/stubbed"],listWebhookDeliveries:["GET /app/hook/deliveries"],redeliverWebhookDelivery:["POST /app/hook/deliveries/{delivery_id}/attempts"],removeRepoFromInstallation:["DELETE /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","removeRepoFromInstallationForAuthenticatedUser"]}],removeRepoFromInstallationForAuthenticatedUser:["DELETE /user/installations/{installation_id}/repositories/{repository_id}"],resetToken:["PATCH /applications/{client_id}/token"],revokeInstallationAccessToken:["DELETE /installation/token"],scopeToken:["POST /applications/{client_id}/token/scoped"],suspendInstallation:["PUT /app/installations/{installation_id}/suspended"],unsuspendInstallation:["DELETE /app/installations/{installation_id}/suspended"],updateWebhookConfigForApp:["PATCH /app/hook/config"]},billing:{getGithubActionsBillingOrg:["GET /orgs/{org}/settings/billing/actions"],getGithubActionsBillingUser:["GET /users/{username}/settings/billing/actions"],getGithubPackagesBillingOrg:["GET /orgs/{org}/settings/billing/packages"],getGithubPackagesBillingUser:["GET /users/{username}/settings/billing/packages"],getSharedStorageBillingOrg:["GET /orgs/{org}/settings/billing/shared-storage"],getSharedStorageBillingUser:["GET /users/{username}/settings/billing/shared-storage"]},checks:{create:["POST /repos/{owner}/{repo}/check-runs"],createSuite:["POST /repos/{owner}/{repo}/check-suites"],get:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],getSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],listAnnotations:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"],listForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],listForSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"],listSuitesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],rerequestRun:["POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"],rerequestSuite:["POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"],setSuitesPreferences:["PATCH /repos/{owner}/{repo}/check-suites/preferences"],update:["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]},codeScanning:{deleteAnalysis:["DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"],getAlert:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",{},{renamedParameters:{alert_id:"alert_number"}}],getAnalysis:["GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"],getCodeqlDatabase:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"],getDefaultSetup:["GET /repos/{owner}/{repo}/code-scanning/default-setup"],getSarif:["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],listAlertInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"],listAlertsForOrg:["GET /orgs/{org}/code-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/code-scanning/alerts"],listAlertsInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",{},{renamed:["codeScanning","listAlertInstances"]}],listCodeqlDatabases:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases"],listRecentAnalyses:["GET /repos/{owner}/{repo}/code-scanning/analyses"],updateAlert:["PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"],updateDefaultSetup:["PATCH /repos/{owner}/{repo}/code-scanning/default-setup"],uploadSarif:["POST /repos/{owner}/{repo}/code-scanning/sarifs"]},codesOfConduct:{getAllCodesOfConduct:["GET /codes_of_conduct"],getConductCode:["GET /codes_of_conduct/{key}"]},codespaces:{addRepositoryForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],checkPermissionsForDevcontainer:["GET /repos/{owner}/{repo}/codespaces/permissions_check"],codespaceMachinesForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/machines"],createForAuthenticatedUser:["POST /user/codespaces"],createOrUpdateOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],createOrUpdateSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}"],createWithPrForAuthenticatedUser:["POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces"],createWithRepoForAuthenticatedUser:["POST /repos/{owner}/{repo}/codespaces"],deleteForAuthenticatedUser:["DELETE /user/codespaces/{codespace_name}"],deleteFromOrganization:["DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}"],deleteOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],deleteSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}"],exportForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/exports"],getCodespacesForUserInOrg:["GET /orgs/{org}/members/{username}/codespaces"],getExportDetailsForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/exports/{export_id}"],getForAuthenticatedUser:["GET /user/codespaces/{codespace_name}"],getOrgPublicKey:["GET /orgs/{org}/codespaces/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}"],getPublicKeyForAuthenticatedUser:["GET /user/codespaces/secrets/public-key"],getRepoPublicKey:["GET /repos/{owner}/{repo}/codespaces/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],getSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}"],listDevcontainersInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/devcontainers"],listForAuthenticatedUser:["GET /user/codespaces"],listInOrganization:["GET /orgs/{org}/codespaces",{},{renamedParameters:{org_id:"org"}}],listInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces"],listOrgSecrets:["GET /orgs/{org}/codespaces/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/codespaces/secrets"],listRepositoriesForSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}/repositories"],listSecretsForAuthenticatedUser:["GET /user/codespaces/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],preFlightWithRepoForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/new"],publishForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/publish"],removeRepositoryForSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],repoMachinesForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/machines"],setRepositoriesForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],startForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/start"],stopForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/stop"],stopInOrganization:["POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop"],updateForAuthenticatedUser:["PATCH /user/codespaces/{codespace_name}"]},copilot:{addCopilotSeatsForTeams:["POST /orgs/{org}/copilot/billing/selected_teams"],addCopilotSeatsForUsers:["POST /orgs/{org}/copilot/billing/selected_users"],cancelCopilotSeatAssignmentForTeams:["DELETE /orgs/{org}/copilot/billing/selected_teams"],cancelCopilotSeatAssignmentForUsers:["DELETE /orgs/{org}/copilot/billing/selected_users"],getCopilotOrganizationDetails:["GET /orgs/{org}/copilot/billing"],getCopilotSeatDetailsForUser:["GET /orgs/{org}/members/{username}/copilot"],listCopilotSeats:["GET /orgs/{org}/copilot/billing/seats"],usageMetricsForEnterprise:["GET /enterprises/{enterprise}/copilot/usage"],usageMetricsForOrg:["GET /orgs/{org}/copilot/usage"],usageMetricsForTeam:["GET /orgs/{org}/team/{team_slug}/copilot/usage"]},dependabot:{addSelectedRepoToOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],deleteOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],getAlert:["GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"],getOrgPublicKey:["GET /orgs/{org}/dependabot/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}"],getRepoPublicKey:["GET /repos/{owner}/{repo}/dependabot/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/dependabot/alerts"],listAlertsForOrg:["GET /orgs/{org}/dependabot/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/dependabot/alerts"],listOrgSecrets:["GET /orgs/{org}/dependabot/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/dependabot/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],updateAlert:["PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"]},dependencyGraph:{createRepositorySnapshot:["POST /repos/{owner}/{repo}/dependency-graph/snapshots"],diffRange:["GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}"],exportSbom:["GET /repos/{owner}/{repo}/dependency-graph/sbom"]},emojis:{get:["GET /emojis"]},gists:{checkIsStarred:["GET /gists/{gist_id}/star"],create:["POST /gists"],createComment:["POST /gists/{gist_id}/comments"],delete:["DELETE /gists/{gist_id}"],deleteComment:["DELETE /gists/{gist_id}/comments/{comment_id}"],fork:["POST /gists/{gist_id}/forks"],get:["GET /gists/{gist_id}"],getComment:["GET /gists/{gist_id}/comments/{comment_id}"],getRevision:["GET /gists/{gist_id}/{sha}"],list:["GET /gists"],listComments:["GET /gists/{gist_id}/comments"],listCommits:["GET /gists/{gist_id}/commits"],listForUser:["GET /users/{username}/gists"],listForks:["GET /gists/{gist_id}/forks"],listPublic:["GET /gists/public"],listStarred:["GET /gists/starred"],star:["PUT /gists/{gist_id}/star"],unstar:["DELETE /gists/{gist_id}/star"],update:["PATCH /gists/{gist_id}"],updateComment:["PATCH /gists/{gist_id}/comments/{comment_id}"]},git:{createBlob:["POST /repos/{owner}/{repo}/git/blobs"],createCommit:["POST /repos/{owner}/{repo}/git/commits"],createRef:["POST /repos/{owner}/{repo}/git/refs"],createTag:["POST /repos/{owner}/{repo}/git/tags"],createTree:["POST /repos/{owner}/{repo}/git/trees"],deleteRef:["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],getBlob:["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],getCommit:["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],getRef:["GET /repos/{owner}/{repo}/git/ref/{ref}"],getTag:["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],getTree:["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],listMatchingRefs:["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],updateRef:["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]},gitignore:{getAllTemplates:["GET /gitignore/templates"],getTemplate:["GET /gitignore/templates/{name}"]},interactions:{getRestrictionsForAuthenticatedUser:["GET /user/interaction-limits"],getRestrictionsForOrg:["GET /orgs/{org}/interaction-limits"],getRestrictionsForRepo:["GET /repos/{owner}/{repo}/interaction-limits"],getRestrictionsForYourPublicRepos:["GET /user/interaction-limits",{},{renamed:["interactions","getRestrictionsForAuthenticatedUser"]}],removeRestrictionsForAuthenticatedUser:["DELETE /user/interaction-limits"],removeRestrictionsForOrg:["DELETE /orgs/{org}/interaction-limits"],removeRestrictionsForRepo:["DELETE /repos/{owner}/{repo}/interaction-limits"],removeRestrictionsForYourPublicRepos:["DELETE /user/interaction-limits",{},{renamed:["interactions","removeRestrictionsForAuthenticatedUser"]}],setRestrictionsForAuthenticatedUser:["PUT /user/interaction-limits"],setRestrictionsForOrg:["PUT /orgs/{org}/interaction-limits"],setRestrictionsForRepo:["PUT /repos/{owner}/{repo}/interaction-limits"],setRestrictionsForYourPublicRepos:["PUT /user/interaction-limits",{},{renamed:["interactions","setRestrictionsForAuthenticatedUser"]}]},issues:{addAssignees:["POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"],addLabels:["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],checkUserCanBeAssigned:["GET /repos/{owner}/{repo}/assignees/{assignee}"],checkUserCanBeAssignedToIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}"],create:["POST /repos/{owner}/{repo}/issues"],createComment:["POST /repos/{owner}/{repo}/issues/{issue_number}/comments"],createLabel:["POST /repos/{owner}/{repo}/labels"],createMilestone:["POST /repos/{owner}/{repo}/milestones"],deleteComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"],deleteLabel:["DELETE /repos/{owner}/{repo}/labels/{name}"],deleteMilestone:["DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"],get:["GET /repos/{owner}/{repo}/issues/{issue_number}"],getComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],getEvent:["GET /repos/{owner}/{repo}/issues/events/{event_id}"],getLabel:["GET /repos/{owner}/{repo}/labels/{name}"],getMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],list:["GET /issues"],listAssignees:["GET /repos/{owner}/{repo}/assignees"],listComments:["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],listCommentsForRepo:["GET /repos/{owner}/{repo}/issues/comments"],listEvents:["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],listEventsForRepo:["GET /repos/{owner}/{repo}/issues/events"],listEventsForTimeline:["GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"],listForAuthenticatedUser:["GET /user/issues"],listForOrg:["GET /orgs/{org}/issues"],listForRepo:["GET /repos/{owner}/{repo}/issues"],listLabelsForMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"],listLabelsForRepo:["GET /repos/{owner}/{repo}/labels"],listLabelsOnIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/labels"],listMilestones:["GET /repos/{owner}/{repo}/milestones"],lock:["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],removeAllLabels:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"],removeAssignees:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"],removeLabel:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"],setLabels:["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],unlock:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],update:["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],updateComment:["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],updateLabel:["PATCH /repos/{owner}/{repo}/labels/{name}"],updateMilestone:["PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"]},licenses:{get:["GET /licenses/{license}"],getAllCommonlyUsed:["GET /licenses"],getForRepo:["GET /repos/{owner}/{repo}/license"]},markdown:{render:["POST /markdown"],renderRaw:["POST /markdown/raw",{headers:{"content-type":"text/plain; charset=utf-8"}}]},meta:{get:["GET /meta"],getAllVersions:["GET /versions"],getOctocat:["GET /octocat"],getZen:["GET /zen"],root:["GET /"]},migrations:{deleteArchiveForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/archive"],deleteArchiveForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/archive"],downloadArchiveForOrg:["GET /orgs/{org}/migrations/{migration_id}/archive"],getArchiveForAuthenticatedUser:["GET /user/migrations/{migration_id}/archive"],getStatusForAuthenticatedUser:["GET /user/migrations/{migration_id}"],getStatusForOrg:["GET /orgs/{org}/migrations/{migration_id}"],listForAuthenticatedUser:["GET /user/migrations"],listForOrg:["GET /orgs/{org}/migrations"],listReposForAuthenticatedUser:["GET /user/migrations/{migration_id}/repositories"],listReposForOrg:["GET /orgs/{org}/migrations/{migration_id}/repositories"],listReposForUser:["GET /user/migrations/{migration_id}/repositories",{},{renamed:["migrations","listReposForAuthenticatedUser"]}],startForAuthenticatedUser:["POST /user/migrations"],startForOrg:["POST /orgs/{org}/migrations"],unlockRepoForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"],unlockRepoForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"]},oidc:{getOidcCustomSubTemplateForOrg:["GET /orgs/{org}/actions/oidc/customization/sub"],updateOidcCustomSubTemplateForOrg:["PUT /orgs/{org}/actions/oidc/customization/sub"]},orgs:{addSecurityManagerTeam:["PUT /orgs/{org}/security-managers/teams/{team_slug}"],assignTeamToOrgRole:["PUT /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],assignUserToOrgRole:["PUT /orgs/{org}/organization-roles/users/{username}/{role_id}"],blockUser:["PUT /orgs/{org}/blocks/{username}"],cancelInvitation:["DELETE /orgs/{org}/invitations/{invitation_id}"],checkBlockedUser:["GET /orgs/{org}/blocks/{username}"],checkMembershipForUser:["GET /orgs/{org}/members/{username}"],checkPublicMembershipForUser:["GET /orgs/{org}/public_members/{username}"],convertMemberToOutsideCollaborator:["PUT /orgs/{org}/outside_collaborators/{username}"],createCustomOrganizationRole:["POST /orgs/{org}/organization-roles"],createInvitation:["POST /orgs/{org}/invitations"],createOrUpdateCustomProperties:["PATCH /orgs/{org}/properties/schema"],createOrUpdateCustomPropertiesValuesForRepos:["PATCH /orgs/{org}/properties/values"],createOrUpdateCustomProperty:["PUT /orgs/{org}/properties/schema/{custom_property_name}"],createWebhook:["POST /orgs/{org}/hooks"],delete:["DELETE /orgs/{org}"],deleteCustomOrganizationRole:["DELETE /orgs/{org}/organization-roles/{role_id}"],deleteWebhook:["DELETE /orgs/{org}/hooks/{hook_id}"],enableOrDisableSecurityProductOnAllOrgRepos:["POST /orgs/{org}/{security_product}/{enablement}"],get:["GET /orgs/{org}"],getAllCustomProperties:["GET /orgs/{org}/properties/schema"],getCustomProperty:["GET /orgs/{org}/properties/schema/{custom_property_name}"],getMembershipForAuthenticatedUser:["GET /user/memberships/orgs/{org}"],getMembershipForUser:["GET /orgs/{org}/memberships/{username}"],getOrgRole:["GET /orgs/{org}/organization-roles/{role_id}"],getWebhook:["GET /orgs/{org}/hooks/{hook_id}"],getWebhookConfigForOrg:["GET /orgs/{org}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"],list:["GET /organizations"],listAppInstallations:["GET /orgs/{org}/installations"],listBlockedUsers:["GET /orgs/{org}/blocks"],listCustomPropertiesValuesForRepos:["GET /orgs/{org}/properties/values"],listFailedInvitations:["GET /orgs/{org}/failed_invitations"],listForAuthenticatedUser:["GET /user/orgs"],listForUser:["GET /users/{username}/orgs"],listInvitationTeams:["GET /orgs/{org}/invitations/{invitation_id}/teams"],listMembers:["GET /orgs/{org}/members"],listMembershipsForAuthenticatedUser:["GET /user/memberships/orgs"],listOrgRoleTeams:["GET /orgs/{org}/organization-roles/{role_id}/teams"],listOrgRoleUsers:["GET /orgs/{org}/organization-roles/{role_id}/users"],listOrgRoles:["GET /orgs/{org}/organization-roles"],listOrganizationFineGrainedPermissions:["GET /orgs/{org}/organization-fine-grained-permissions"],listOutsideCollaborators:["GET /orgs/{org}/outside_collaborators"],listPatGrantRepositories:["GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories"],listPatGrantRequestRepositories:["GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories"],listPatGrantRequests:["GET /orgs/{org}/personal-access-token-requests"],listPatGrants:["GET /orgs/{org}/personal-access-tokens"],listPendingInvitations:["GET /orgs/{org}/invitations"],listPublicMembers:["GET /orgs/{org}/public_members"],listSecurityManagerTeams:["GET /orgs/{org}/security-managers"],listWebhookDeliveries:["GET /orgs/{org}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /orgs/{org}/hooks"],patchCustomOrganizationRole:["PATCH /orgs/{org}/organization-roles/{role_id}"],pingWebhook:["POST /orgs/{org}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeCustomProperty:["DELETE /orgs/{org}/properties/schema/{custom_property_name}"],removeMember:["DELETE /orgs/{org}/members/{username}"],removeMembershipForUser:["DELETE /orgs/{org}/memberships/{username}"],removeOutsideCollaborator:["DELETE /orgs/{org}/outside_collaborators/{username}"],removePublicMembershipForAuthenticatedUser:["DELETE /orgs/{org}/public_members/{username}"],removeSecurityManagerTeam:["DELETE /orgs/{org}/security-managers/teams/{team_slug}"],reviewPatGrantRequest:["POST /orgs/{org}/personal-access-token-requests/{pat_request_id}"],reviewPatGrantRequestsInBulk:["POST /orgs/{org}/personal-access-token-requests"],revokeAllOrgRolesTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}"],revokeAllOrgRolesUser:["DELETE /orgs/{org}/organization-roles/users/{username}"],revokeOrgRoleTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],revokeOrgRoleUser:["DELETE /orgs/{org}/organization-roles/users/{username}/{role_id}"],setMembershipForUser:["PUT /orgs/{org}/memberships/{username}"],setPublicMembershipForAuthenticatedUser:["PUT /orgs/{org}/public_members/{username}"],unblockUser:["DELETE /orgs/{org}/blocks/{username}"],update:["PATCH /orgs/{org}"],updateMembershipForAuthenticatedUser:["PATCH /user/memberships/orgs/{org}"],updatePatAccess:["POST /orgs/{org}/personal-access-tokens/{pat_id}"],updatePatAccesses:["POST /orgs/{org}/personal-access-tokens"],updateWebhook:["PATCH /orgs/{org}/hooks/{hook_id}"],updateWebhookConfigForOrg:["PATCH /orgs/{org}/hooks/{hook_id}/config"]},packages:{deletePackageForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}"],deletePackageForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}"],deletePackageForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}"],deletePackageVersionForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getAllPackageVersionsForAPackageOwnedByAnOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByOrg"]}],getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByAuthenticatedUser"]}],getAllPackageVersionsForPackageOwnedByAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions"],getPackageForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}"],getPackageForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}"],getPackageForUser:["GET /users/{username}/packages/{package_type}/{package_name}"],getPackageVersionForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],listDockerMigrationConflictingPackagesForAuthenticatedUser:["GET /user/docker/conflicts"],listDockerMigrationConflictingPackagesForOrganization:["GET /orgs/{org}/docker/conflicts"],listDockerMigrationConflictingPackagesForUser:["GET /users/{username}/docker/conflicts"],listPackagesForAuthenticatedUser:["GET /user/packages"],listPackagesForOrganization:["GET /orgs/{org}/packages"],listPackagesForUser:["GET /users/{username}/packages"],restorePackageForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForUser:["POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageVersionForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForUser:["POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"]},projects:{addCollaborator:["PUT /projects/{project_id}/collaborators/{username}"],createCard:["POST /projects/columns/{column_id}/cards"],createColumn:["POST /projects/{project_id}/columns"],createForAuthenticatedUser:["POST /user/projects"],createForOrg:["POST /orgs/{org}/projects"],createForRepo:["POST /repos/{owner}/{repo}/projects"],delete:["DELETE /projects/{project_id}"],deleteCard:["DELETE /projects/columns/cards/{card_id}"],deleteColumn:["DELETE /projects/columns/{column_id}"],get:["GET /projects/{project_id}"],getCard:["GET /projects/columns/cards/{card_id}"],getColumn:["GET /projects/columns/{column_id}"],getPermissionForUser:["GET /projects/{project_id}/collaborators/{username}/permission"],listCards:["GET /projects/columns/{column_id}/cards"],listCollaborators:["GET /projects/{project_id}/collaborators"],listColumns:["GET /projects/{project_id}/columns"],listForOrg:["GET /orgs/{org}/projects"],listForRepo:["GET /repos/{owner}/{repo}/projects"],listForUser:["GET /users/{username}/projects"],moveCard:["POST /projects/columns/cards/{card_id}/moves"],moveColumn:["POST /projects/columns/{column_id}/moves"],removeCollaborator:["DELETE /projects/{project_id}/collaborators/{username}"],update:["PATCH /projects/{project_id}"],updateCard:["PATCH /projects/columns/cards/{card_id}"],updateColumn:["PATCH /projects/columns/{column_id}"]},pulls:{checkIfMerged:["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],create:["POST /repos/{owner}/{repo}/pulls"],createReplyForReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"],createReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],createReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"],deletePendingReview:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],deleteReviewComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"],dismissReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"],get:["GET /repos/{owner}/{repo}/pulls/{pull_number}"],getReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],getReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],list:["GET /repos/{owner}/{repo}/pulls"],listCommentsForReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"],listCommits:["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],listFiles:["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],listRequestedReviewers:["GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],listReviewComments:["GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"],listReviewCommentsForRepo:["GET /repos/{owner}/{repo}/pulls/comments"],listReviews:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],merge:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],removeRequestedReviewers:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],requestReviewers:["POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],submitReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"],update:["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],updateBranch:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"],updateReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],updateReviewComment:["PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"]},rateLimit:{get:["GET /rate_limit"]},reactions:{createForCommitComment:["POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"],createForIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"],createForIssueComment:["POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],createForPullRequestReviewComment:["POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],createForRelease:["POST /repos/{owner}/{repo}/releases/{release_id}/reactions"],createForTeamDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],createForTeamDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"],deleteForCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"],deleteForIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"],deleteForIssueComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"],deleteForPullRequestComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"],deleteForRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}"],deleteForTeamDiscussion:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"],deleteForTeamDiscussionComment:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"],listForCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"],listForIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],listForIssueComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],listForPullRequestReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],listForRelease:["GET /repos/{owner}/{repo}/releases/{release_id}/reactions"],listForTeamDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],listForTeamDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"]},repos:{acceptInvitation:["PATCH /user/repository_invitations/{invitation_id}",{},{renamed:["repos","acceptInvitationForAuthenticatedUser"]}],acceptInvitationForAuthenticatedUser:["PATCH /user/repository_invitations/{invitation_id}"],addAppAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],addCollaborator:["PUT /repos/{owner}/{repo}/collaborators/{username}"],addStatusCheckContexts:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],addTeamAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],addUserAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],cancelPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel"],checkAutomatedSecurityFixes:["GET /repos/{owner}/{repo}/automated-security-fixes"],checkCollaborator:["GET /repos/{owner}/{repo}/collaborators/{username}"],checkPrivateVulnerabilityReporting:["GET /repos/{owner}/{repo}/private-vulnerability-reporting"],checkVulnerabilityAlerts:["GET /repos/{owner}/{repo}/vulnerability-alerts"],codeownersErrors:["GET /repos/{owner}/{repo}/codeowners/errors"],compareCommits:["GET /repos/{owner}/{repo}/compare/{base}...{head}"],compareCommitsWithBasehead:["GET /repos/{owner}/{repo}/compare/{basehead}"],createAutolink:["POST /repos/{owner}/{repo}/autolinks"],createCommitComment:["POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"],createCommitSignatureProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],createCommitStatus:["POST /repos/{owner}/{repo}/statuses/{sha}"],createDeployKey:["POST /repos/{owner}/{repo}/keys"],createDeployment:["POST /repos/{owner}/{repo}/deployments"],createDeploymentBranchPolicy:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],createDeploymentProtectionRule:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],createDeploymentStatus:["POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],createDispatchEvent:["POST /repos/{owner}/{repo}/dispatches"],createForAuthenticatedUser:["POST /user/repos"],createFork:["POST /repos/{owner}/{repo}/forks"],createInOrg:["POST /orgs/{org}/repos"],createOrUpdateCustomPropertiesValues:["PATCH /repos/{owner}/{repo}/properties/values"],createOrUpdateEnvironment:["PUT /repos/{owner}/{repo}/environments/{environment_name}"],createOrUpdateFileContents:["PUT /repos/{owner}/{repo}/contents/{path}"],createOrgRuleset:["POST /orgs/{org}/rulesets"],createPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments"],createPagesSite:["POST /repos/{owner}/{repo}/pages"],createRelease:["POST /repos/{owner}/{repo}/releases"],createRepoRuleset:["POST /repos/{owner}/{repo}/rulesets"],createTagProtection:["POST /repos/{owner}/{repo}/tags/protection"],createUsingTemplate:["POST /repos/{template_owner}/{template_repo}/generate"],createWebhook:["POST /repos/{owner}/{repo}/hooks"],declineInvitation:["DELETE /user/repository_invitations/{invitation_id}",{},{renamed:["repos","declineInvitationForAuthenticatedUser"]}],declineInvitationForAuthenticatedUser:["DELETE /user/repository_invitations/{invitation_id}"],delete:["DELETE /repos/{owner}/{repo}"],deleteAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],deleteAdminBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],deleteAnEnvironment:["DELETE /repos/{owner}/{repo}/environments/{environment_name}"],deleteAutolink:["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],deleteBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection"],deleteCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],deleteCommitSignatureProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],deleteDeployKey:["DELETE /repos/{owner}/{repo}/keys/{key_id}"],deleteDeployment:["DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"],deleteDeploymentBranchPolicy:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],deleteFile:["DELETE /repos/{owner}/{repo}/contents/{path}"],deleteInvitation:["DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"],deleteOrgRuleset:["DELETE /orgs/{org}/rulesets/{ruleset_id}"],deletePagesSite:["DELETE /repos/{owner}/{repo}/pages"],deletePullRequestReviewProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],deleteRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}"],deleteReleaseAsset:["DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"],deleteRepoRuleset:["DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}"],deleteTagProtection:["DELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}"],deleteWebhook:["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],disableAutomatedSecurityFixes:["DELETE /repos/{owner}/{repo}/automated-security-fixes"],disableDeploymentProtectionRule:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],disablePrivateVulnerabilityReporting:["DELETE /repos/{owner}/{repo}/private-vulnerability-reporting"],disableVulnerabilityAlerts:["DELETE /repos/{owner}/{repo}/vulnerability-alerts"],downloadArchive:["GET /repos/{owner}/{repo}/zipball/{ref}",{},{renamed:["repos","downloadZipballArchive"]}],downloadTarballArchive:["GET /repos/{owner}/{repo}/tarball/{ref}"],downloadZipballArchive:["GET /repos/{owner}/{repo}/zipball/{ref}"],enableAutomatedSecurityFixes:["PUT /repos/{owner}/{repo}/automated-security-fixes"],enablePrivateVulnerabilityReporting:["PUT /repos/{owner}/{repo}/private-vulnerability-reporting"],enableVulnerabilityAlerts:["PUT /repos/{owner}/{repo}/vulnerability-alerts"],generateReleaseNotes:["POST /repos/{owner}/{repo}/releases/generate-notes"],get:["GET /repos/{owner}/{repo}"],getAccessRestrictions:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],getAdminBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],getAllDeploymentProtectionRules:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],getAllEnvironments:["GET /repos/{owner}/{repo}/environments"],getAllStatusCheckContexts:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"],getAllTopics:["GET /repos/{owner}/{repo}/topics"],getAppsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"],getAutolink:["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],getBranch:["GET /repos/{owner}/{repo}/branches/{branch}"],getBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection"],getBranchRules:["GET /repos/{owner}/{repo}/rules/branches/{branch}"],getClones:["GET /repos/{owner}/{repo}/traffic/clones"],getCodeFrequencyStats:["GET /repos/{owner}/{repo}/stats/code_frequency"],getCollaboratorPermissionLevel:["GET /repos/{owner}/{repo}/collaborators/{username}/permission"],getCombinedStatusForRef:["GET /repos/{owner}/{repo}/commits/{ref}/status"],getCommit:["GET /repos/{owner}/{repo}/commits/{ref}"],getCommitActivityStats:["GET /repos/{owner}/{repo}/stats/commit_activity"],getCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}"],getCommitSignatureProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],getCommunityProfileMetrics:["GET /repos/{owner}/{repo}/community/profile"],getContent:["GET /repos/{owner}/{repo}/contents/{path}"],getContributorsStats:["GET /repos/{owner}/{repo}/stats/contributors"],getCustomDeploymentProtectionRule:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],getCustomPropertiesValues:["GET /repos/{owner}/{repo}/properties/values"],getDeployKey:["GET /repos/{owner}/{repo}/keys/{key_id}"],getDeployment:["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],getDeploymentBranchPolicy:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],getDeploymentStatus:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"],getEnvironment:["GET /repos/{owner}/{repo}/environments/{environment_name}"],getLatestPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/latest"],getLatestRelease:["GET /repos/{owner}/{repo}/releases/latest"],getOrgRuleSuite:["GET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}"],getOrgRuleSuites:["GET /orgs/{org}/rulesets/rule-suites"],getOrgRuleset:["GET /orgs/{org}/rulesets/{ruleset_id}"],getOrgRulesets:["GET /orgs/{org}/rulesets"],getPages:["GET /repos/{owner}/{repo}/pages"],getPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],getPagesDeployment:["GET /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}"],getPagesHealthCheck:["GET /repos/{owner}/{repo}/pages/health"],getParticipationStats:["GET /repos/{owner}/{repo}/stats/participation"],getPullRequestReviewProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],getPunchCardStats:["GET /repos/{owner}/{repo}/stats/punch_card"],getReadme:["GET /repos/{owner}/{repo}/readme"],getReadmeInDirectory:["GET /repos/{owner}/{repo}/readme/{dir}"],getRelease:["GET /repos/{owner}/{repo}/releases/{release_id}"],getReleaseAsset:["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],getReleaseByTag:["GET /repos/{owner}/{repo}/releases/tags/{tag}"],getRepoRuleSuite:["GET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}"],getRepoRuleSuites:["GET /repos/{owner}/{repo}/rulesets/rule-suites"],getRepoRuleset:["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}"],getRepoRulesets:["GET /repos/{owner}/{repo}/rulesets"],getStatusChecksProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],getTeamsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"],getTopPaths:["GET /repos/{owner}/{repo}/traffic/popular/paths"],getTopReferrers:["GET /repos/{owner}/{repo}/traffic/popular/referrers"],getUsersWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"],getViews:["GET /repos/{owner}/{repo}/traffic/views"],getWebhook:["GET /repos/{owner}/{repo}/hooks/{hook_id}"],getWebhookConfigForRepo:["GET /repos/{owner}/{repo}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"],listActivities:["GET /repos/{owner}/{repo}/activity"],listAutolinks:["GET /repos/{owner}/{repo}/autolinks"],listBranches:["GET /repos/{owner}/{repo}/branches"],listBranchesForHeadCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"],listCollaborators:["GET /repos/{owner}/{repo}/collaborators"],listCommentsForCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"],listCommitCommentsForRepo:["GET /repos/{owner}/{repo}/comments"],listCommitStatusesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/statuses"],listCommits:["GET /repos/{owner}/{repo}/commits"],listContributors:["GET /repos/{owner}/{repo}/contributors"],listCustomDeploymentRuleIntegrations:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps"],listDeployKeys:["GET /repos/{owner}/{repo}/keys"],listDeploymentBranchPolicies:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],listDeploymentStatuses:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],listDeployments:["GET /repos/{owner}/{repo}/deployments"],listForAuthenticatedUser:["GET /user/repos"],listForOrg:["GET /orgs/{org}/repos"],listForUser:["GET /users/{username}/repos"],listForks:["GET /repos/{owner}/{repo}/forks"],listInvitations:["GET /repos/{owner}/{repo}/invitations"],listInvitationsForAuthenticatedUser:["GET /user/repository_invitations"],listLanguages:["GET /repos/{owner}/{repo}/languages"],listPagesBuilds:["GET /repos/{owner}/{repo}/pages/builds"],listPublic:["GET /repositories"],listPullRequestsAssociatedWithCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"],listReleaseAssets:["GET /repos/{owner}/{repo}/releases/{release_id}/assets"],listReleases:["GET /repos/{owner}/{repo}/releases"],listTagProtection:["GET /repos/{owner}/{repo}/tags/protection"],listTags:["GET /repos/{owner}/{repo}/tags"],listTeams:["GET /repos/{owner}/{repo}/teams"],listWebhookDeliveries:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /repos/{owner}/{repo}/hooks"],merge:["POST /repos/{owner}/{repo}/merges"],mergeUpstream:["POST /repos/{owner}/{repo}/merge-upstream"],pingWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeAppAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],removeCollaborator:["DELETE /repos/{owner}/{repo}/collaborators/{username}"],removeStatusCheckContexts:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],removeStatusCheckProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],removeTeamAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],removeUserAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],renameBranch:["POST /repos/{owner}/{repo}/branches/{branch}/rename"],replaceAllTopics:["PUT /repos/{owner}/{repo}/topics"],requestPagesBuild:["POST /repos/{owner}/{repo}/pages/builds"],setAdminBranchProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],setAppAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],setStatusCheckContexts:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],setTeamAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],setUserAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],testPushWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],transfer:["POST /repos/{owner}/{repo}/transfer"],update:["PATCH /repos/{owner}/{repo}"],updateBranchProtection:["PUT /repos/{owner}/{repo}/branches/{branch}/protection"],updateCommitComment:["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],updateDeploymentBranchPolicy:["PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],updateInformationAboutPagesSite:["PUT /repos/{owner}/{repo}/pages"],updateInvitation:["PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"],updateOrgRuleset:["PUT /orgs/{org}/rulesets/{ruleset_id}"],updatePullRequestReviewProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],updateRelease:["PATCH /repos/{owner}/{repo}/releases/{release_id}"],updateReleaseAsset:["PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"],updateRepoRuleset:["PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}"],updateStatusCheckPotection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",{},{renamed:["repos","updateStatusCheckProtection"]}],updateStatusCheckProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],updateWebhook:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],updateWebhookConfigForRepo:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"],uploadReleaseAsset:["POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",{baseUrl:"https://uploads.github.com"}]},search:{code:["GET /search/code"],commits:["GET /search/commits"],issuesAndPullRequests:["GET /search/issues"],labels:["GET /search/labels"],repos:["GET /search/repositories"],topics:["GET /search/topics"],users:["GET /search/users"]},secretScanning:{getAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/secret-scanning/alerts"],listAlertsForOrg:["GET /orgs/{org}/secret-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/secret-scanning/alerts"],listLocationsForAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"],updateAlert:["PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"]},securityAdvisories:{createFork:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks"],createPrivateVulnerabilityReport:["POST /repos/{owner}/{repo}/security-advisories/reports"],createRepositoryAdvisory:["POST /repos/{owner}/{repo}/security-advisories"],createRepositoryAdvisoryCveRequest:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve"],getGlobalAdvisory:["GET /advisories/{ghsa_id}"],getRepositoryAdvisory:["GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}"],listGlobalAdvisories:["GET /advisories"],listOrgRepositoryAdvisories:["GET /orgs/{org}/security-advisories"],listRepositoryAdvisories:["GET /repos/{owner}/{repo}/security-advisories"],updateRepositoryAdvisory:["PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}"]},teams:{addOrUpdateMembershipForUserInOrg:["PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"],addOrUpdateProjectPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"],addOrUpdateRepoPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],checkPermissionsForProjectInOrg:["GET /orgs/{org}/teams/{team_slug}/projects/{project_id}"],checkPermissionsForRepoInOrg:["GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],create:["POST /orgs/{org}/teams"],createDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],createDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions"],deleteDiscussionCommentInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],deleteDiscussionInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],deleteInOrg:["DELETE /orgs/{org}/teams/{team_slug}"],getByName:["GET /orgs/{org}/teams/{team_slug}"],getDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],getDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],getMembershipForUserInOrg:["GET /orgs/{org}/teams/{team_slug}/memberships/{username}"],list:["GET /orgs/{org}/teams"],listChildInOrg:["GET /orgs/{org}/teams/{team_slug}/teams"],listDiscussionCommentsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],listDiscussionsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions"],listForAuthenticatedUser:["GET /user/teams"],listMembersInOrg:["GET /orgs/{org}/teams/{team_slug}/members"],listPendingInvitationsInOrg:["GET /orgs/{org}/teams/{team_slug}/invitations"],listProjectsInOrg:["GET /orgs/{org}/teams/{team_slug}/projects"],listReposInOrg:["GET /orgs/{org}/teams/{team_slug}/repos"],removeMembershipForUserInOrg:["DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"],removeProjectInOrg:["DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"],removeRepoInOrg:["DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],updateDiscussionCommentInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],updateDiscussionInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],updateInOrg:["PATCH /orgs/{org}/teams/{team_slug}"]},users:{addEmailForAuthenticated:["POST /user/emails",{},{renamed:["users","addEmailForAuthenticatedUser"]}],addEmailForAuthenticatedUser:["POST /user/emails"],addSocialAccountForAuthenticatedUser:["POST /user/social_accounts"],block:["PUT /user/blocks/{username}"],checkBlocked:["GET /user/blocks/{username}"],checkFollowingForUser:["GET /users/{username}/following/{target_user}"],checkPersonIsFollowedByAuthenticated:["GET /user/following/{username}"],createGpgKeyForAuthenticated:["POST /user/gpg_keys",{},{renamed:["users","createGpgKeyForAuthenticatedUser"]}],createGpgKeyForAuthenticatedUser:["POST /user/gpg_keys"],createPublicSshKeyForAuthenticated:["POST /user/keys",{},{renamed:["users","createPublicSshKeyForAuthenticatedUser"]}],createPublicSshKeyForAuthenticatedUser:["POST /user/keys"],createSshSigningKeyForAuthenticatedUser:["POST /user/ssh_signing_keys"],deleteEmailForAuthenticated:["DELETE /user/emails",{},{renamed:["users","deleteEmailForAuthenticatedUser"]}],deleteEmailForAuthenticatedUser:["DELETE /user/emails"],deleteGpgKeyForAuthenticated:["DELETE /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","deleteGpgKeyForAuthenticatedUser"]}],deleteGpgKeyForAuthenticatedUser:["DELETE /user/gpg_keys/{gpg_key_id}"],deletePublicSshKeyForAuthenticated:["DELETE /user/keys/{key_id}",{},{renamed:["users","deletePublicSshKeyForAuthenticatedUser"]}],deletePublicSshKeyForAuthenticatedUser:["DELETE /user/keys/{key_id}"],deleteSocialAccountForAuthenticatedUser:["DELETE /user/social_accounts"],deleteSshSigningKeyForAuthenticatedUser:["DELETE /user/ssh_signing_keys/{ssh_signing_key_id}"],follow:["PUT /user/following/{username}"],getAuthenticated:["GET /user"],getByUsername:["GET /users/{username}"],getContextForUser:["GET /users/{username}/hovercard"],getGpgKeyForAuthenticated:["GET /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","getGpgKeyForAuthenticatedUser"]}],getGpgKeyForAuthenticatedUser:["GET /user/gpg_keys/{gpg_key_id}"],getPublicSshKeyForAuthenticated:["GET /user/keys/{key_id}",{},{renamed:["users","getPublicSshKeyForAuthenticatedUser"]}],getPublicSshKeyForAuthenticatedUser:["GET /user/keys/{key_id}"],getSshSigningKeyForAuthenticatedUser:["GET /user/ssh_signing_keys/{ssh_signing_key_id}"],list:["GET /users"],listBlockedByAuthenticated:["GET /user/blocks",{},{renamed:["users","listBlockedByAuthenticatedUser"]}],listBlockedByAuthenticatedUser:["GET /user/blocks"],listEmailsForAuthenticated:["GET /user/emails",{},{renamed:["users","listEmailsForAuthenticatedUser"]}],listEmailsForAuthenticatedUser:["GET /user/emails"],listFollowedByAuthenticated:["GET /user/following",{},{renamed:["users","listFollowedByAuthenticatedUser"]}],listFollowedByAuthenticatedUser:["GET /user/following"],listFollowersForAuthenticatedUser:["GET /user/followers"],listFollowersForUser:["GET /users/{username}/followers"],listFollowingForUser:["GET /users/{username}/following"],listGpgKeysForAuthenticated:["GET /user/gpg_keys",{},{renamed:["users","listGpgKeysForAuthenticatedUser"]}],listGpgKeysForAuthenticatedUser:["GET /user/gpg_keys"],listGpgKeysForUser:["GET /users/{username}/gpg_keys"],listPublicEmailsForAuthenticated:["GET /user/public_emails",{},{renamed:["users","listPublicEmailsForAuthenticatedUser"]}],listPublicEmailsForAuthenticatedUser:["GET /user/public_emails"],listPublicKeysForUser:["GET /users/{username}/keys"],listPublicSshKeysForAuthenticated:["GET /user/keys",{},{renamed:["users","listPublicSshKeysForAuthenticatedUser"]}],listPublicSshKeysForAuthenticatedUser:["GET /user/keys"],listSocialAccountsForAuthenticatedUser:["GET /user/social_accounts"],listSocialAccountsForUser:["GET /users/{username}/social_accounts"],listSshSigningKeysForAuthenticatedUser:["GET /user/ssh_signing_keys"],listSshSigningKeysForUser:["GET /users/{username}/ssh_signing_keys"],setPrimaryEmailVisibilityForAuthenticated:["PATCH /user/email/visibility",{},{renamed:["users","setPrimaryEmailVisibilityForAuthenticatedUser"]}],setPrimaryEmailVisibilityForAuthenticatedUser:["PATCH /user/email/visibility"],unblock:["DELETE /user/blocks/{username}"],unfollow:["DELETE /user/following/{username}"],updateAuthenticated:["PATCH /user"]}};var U=D;const L=new Map;for(const[e,r]of Object.entries(U)){for(const[t,s]of Object.entries(r)){const[r,o,n]=s;const[i,a]=r.split(/ /);const c=Object.assign({method:i,url:a},o);if(!L.has(e)){L.set(e,new Map)}L.get(e).set(t,{scope:e,methodName:t,endpointDefaults:c,decorations:n})}}const x={has({scope:e},r){return L.get(e).has(r)},getOwnPropertyDescriptor(e,r){return{value:this.get(e,r),configurable:true,writable:true,enumerable:true}},defineProperty(e,r,t){Object.defineProperty(e.cache,r,t);return true},deleteProperty(e,r){delete e.cache[r];return true},ownKeys({scope:e}){return[...L.get(e).keys()]},set(e,r,t){return e.cache[r]=t},get({octokit:e,scope:r,cache:t},s){if(t[s]){return t[s]}const o=L.get(r).get(s);if(!o){return void 0}const{endpointDefaults:n,decorations:i}=o;if(i){t[s]=decorate(e,r,s,n,i)}else{t[s]=e.request.defaults(n)}return t[s]}};function endpointsToMethods(e){const r={};for(const t of L.keys()){r[t]=new Proxy({octokit:e,scope:t,cache:{}},x)}return r}function decorate(e,r,t,s,o){const n=e.request.defaults(s);function withDecorations(...s){let i=n.endpoint.merge(...s);if(o.mapToData){i=Object.assign({},i,{data:i[o.mapToData],[o.mapToData]:void 0});return n(i)}if(o.renamed){const[s,n]=o.renamed;e.log.warn(`octokit.${r}.${t}() has been renamed to octokit.${s}.${n}()`)}if(o.deprecated){e.log.warn(o.deprecated)}if(o.renamedParameters){const i=n.endpoint.merge(...s);for(const[s,n]of Object.entries(o.renamedParameters)){if(s in i){e.log.warn(`"${s}" parameter is deprecated for "octokit.${r}.${t}()". Use "${n}" instead`);if(!(n in i)){i[n]=i[s]}delete i[s]}}return n(i)}return n(...s)}return Object.assign(withDecorations,n)}function restEndpointMethods(e){const r=endpointsToMethods(e);return{rest:r}}restEndpointMethods.VERSION=R;function legacyRestEndpointMethods(e){const r=endpointsToMethods(e);return{...r,rest:r}}legacyRestEndpointMethods.VERSION=R;const j="21.0.2";const I=Octokit.plugin(requestLog,legacyRestEndpointMethods,paginateRest).defaults({userAgent:`octokit-rest.js/${j}`})}};var r={};function __nccwpck_require__(t){var s=r[t];if(s!==undefined){return s.exports}var o=r[t]={exports:{}};var n=true;try{e[t].call(o.exports,o,o.exports,__nccwpck_require__);n=false}finally{if(n)delete r[t]}return o.exports}(()=>{__nccwpck_require__.d=(e,r)=>{for(var t in r){if(__nccwpck_require__.o(r,t)&&!__nccwpck_require__.o(e,t)){Object.defineProperty(e,t,{enumerable:true,get:r[t]})}}}})();(()=>{__nccwpck_require__.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r)})();(()=>{__nccwpck_require__.r=e=>{if(typeof Symbol!=="undefined"&&Symbol.toStringTag){Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}Object.defineProperty(e,"__esModule",{value:true})}})();if(typeof __nccwpck_require__!=="undefined")__nccwpck_require__.ab=__dirname+"/";var t=__nccwpck_require__(403);module.exports=t})();